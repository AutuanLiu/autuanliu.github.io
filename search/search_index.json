{
    "docs": [
        {
            "location": "/",
            "text": "Amber Cottage\n\n\n\u6b22\u8fce\u6765\u5230\u6211\u7684\u5c0f\u5c4b \u2014\u2014\u2014\u2014 Amber Cottage\n\n\n\u7b80\u4ecb\n\n\n\u8fd9\u91cc\u662f\u6211\u5206\u4eab\u77e5\u8bc6\u4e0e\u7b14\u8bb0\u7684\u5c0f\u7a7a\u95f4, \u76ee\u524d\u6211\u6240\u5173\u6ce8\u7684\u9886\u57df\u4e3b\u8981\u6709: \u6570\u636e\u79d1\u5b66, \u673a\u5668\u5b66\u4e60, \u6df1\u5ea6\u5b66\u4e60\n\n\n\u4e3b\u8981\u4f7f\u7528\u7684\u5de5\u5177\u4e0e\u6846\u67b6\u662f: PyTorch, TensorFlow, Scikit-Learn\n\n\n\u4e3b\u8981\u4f7f\u7528\u7684\u8bed\u8a00\u6709: Python, Matlab, R\n\n\n\u8bed\u8a00\u4e0e\u6846\u67b6\u867d\u6709\u5343\u5343\u4e07, \u4f46\u6211\u6240\u504f\u7231\u7684\u4ecd\u662f: PyTorch, Python(\u4eba\u751f\u82e6\u77ed, \u6211\u7528Python), \u867d\u7136\u522b\u7684\u4e00\u4e9b\u8bed\u8a00\u4e5f\u4f1a\u70b9, \n\u4f46\u662f\u771f\u6b63\u80fd\u591f\u7528\u6765\u79d1\u7814, \u63a2\u7d22\u7684\u4e5f\u975e Python \u83ab\u5c5e\u4e86\n\n\n\u7406\u60f3\n\n\n\u52b1\u5fd7\u6210\u4e3a\u4e00\u540d\u5408\u683c\u7684 \n\u6570\u636e\u79d1\u5b66\u5bb6\n, \u4e0d\u6c42\u5728\u79d1\u7814\u4e0a\u6709\u591a\u4e48\u7684\u7a81\u51fa, \u53ea\u6c42\u80fd\u591f\u4e0d\u65ad\u5730\u7cbe\u8fdb\u6280\u672f\n\n\n\u73b0\u72b6\n\n\n\u7406\u60f3\u5f88\u4e30\u6ee1, \u73b0\u5b9e\u5f88\u9aa8\u611f\n\n\n\u76ee\u524d, \u6211\u662f\u4e00\u540d\u5728\u8bfb\u7814\u7a76\u751f(\u7814\u4e00), \u8ba1\u7b97\u673a\u79d1\u5b66\u4e0e\u6280\u672f\u4e13\u4e1a, \u6240\u7814\u7a76\u7684\u65b9\u5411\u4e3a\n\n\n\n\n\u96be\u6cbb\u6027\u766b\u75eb\u75c5\u7076\u7684\u7cbe\u786e\u5b9a\u4f4d\n\n\n\u96be\u6cbb\u6027\u766b\u75eb\u7684\u9884\u6d4b\n\n\n\n\n\u5f53\u7136, \u8981\u5b9e\u73b0\u7406\u60f3\u7684\u8def\u9014\u6bd5\u7adf\u5f88\u957f, \u5f88\u8fdc, \u6211\u5e0c\u671b\u80fd\u591f\u4e0d\u65ad\u5730\u903c\u8feb\u81ea\u5df1\u524d\u884c\n\n\n\u8054\u7cfb\n\n\n\n\n\n\n\n\ntitle\n\n\ninfo\n\n\n\n\n\n\n\n\n\n\n\u90ae\u7bb1\n\n\nautuanliu@163.com\n\n\n\n\n\n\nGitHub\n\n\nhttps://github.com/AutuanLiu\n\n\n\n\n\n\n\n\n\n\n\u5b9d\u5251\u950b\u4ece\u78e8\u783a\u51fa, \u6885\u82b1\u9999\u81ea\u82e6\u5bd2\u6765",
            "title": "Home"
        },
        {
            "location": "/#amber-cottage",
            "text": "\u6b22\u8fce\u6765\u5230\u6211\u7684\u5c0f\u5c4b \u2014\u2014\u2014\u2014 Amber Cottage",
            "title": "Amber Cottage"
        },
        {
            "location": "/#_1",
            "text": "\u8fd9\u91cc\u662f\u6211\u5206\u4eab\u77e5\u8bc6\u4e0e\u7b14\u8bb0\u7684\u5c0f\u7a7a\u95f4, \u76ee\u524d\u6211\u6240\u5173\u6ce8\u7684\u9886\u57df\u4e3b\u8981\u6709: \u6570\u636e\u79d1\u5b66, \u673a\u5668\u5b66\u4e60, \u6df1\u5ea6\u5b66\u4e60  \u4e3b\u8981\u4f7f\u7528\u7684\u5de5\u5177\u4e0e\u6846\u67b6\u662f: PyTorch, TensorFlow, Scikit-Learn  \u4e3b\u8981\u4f7f\u7528\u7684\u8bed\u8a00\u6709: Python, Matlab, R  \u8bed\u8a00\u4e0e\u6846\u67b6\u867d\u6709\u5343\u5343\u4e07, \u4f46\u6211\u6240\u504f\u7231\u7684\u4ecd\u662f: PyTorch, Python(\u4eba\u751f\u82e6\u77ed, \u6211\u7528Python), \u867d\u7136\u522b\u7684\u4e00\u4e9b\u8bed\u8a00\u4e5f\u4f1a\u70b9, \n\u4f46\u662f\u771f\u6b63\u80fd\u591f\u7528\u6765\u79d1\u7814, \u63a2\u7d22\u7684\u4e5f\u975e Python \u83ab\u5c5e\u4e86",
            "title": "\u7b80\u4ecb"
        },
        {
            "location": "/#_2",
            "text": "\u52b1\u5fd7\u6210\u4e3a\u4e00\u540d\u5408\u683c\u7684  \u6570\u636e\u79d1\u5b66\u5bb6 , \u4e0d\u6c42\u5728\u79d1\u7814\u4e0a\u6709\u591a\u4e48\u7684\u7a81\u51fa, \u53ea\u6c42\u80fd\u591f\u4e0d\u65ad\u5730\u7cbe\u8fdb\u6280\u672f",
            "title": "\u7406\u60f3"
        },
        {
            "location": "/#_3",
            "text": "\u7406\u60f3\u5f88\u4e30\u6ee1, \u73b0\u5b9e\u5f88\u9aa8\u611f  \u76ee\u524d, \u6211\u662f\u4e00\u540d\u5728\u8bfb\u7814\u7a76\u751f(\u7814\u4e00), \u8ba1\u7b97\u673a\u79d1\u5b66\u4e0e\u6280\u672f\u4e13\u4e1a, \u6240\u7814\u7a76\u7684\u65b9\u5411\u4e3a   \u96be\u6cbb\u6027\u766b\u75eb\u75c5\u7076\u7684\u7cbe\u786e\u5b9a\u4f4d  \u96be\u6cbb\u6027\u766b\u75eb\u7684\u9884\u6d4b   \u5f53\u7136, \u8981\u5b9e\u73b0\u7406\u60f3\u7684\u8def\u9014\u6bd5\u7adf\u5f88\u957f, \u5f88\u8fdc, \u6211\u5e0c\u671b\u80fd\u591f\u4e0d\u65ad\u5730\u903c\u8feb\u81ea\u5df1\u524d\u884c",
            "title": "\u73b0\u72b6"
        },
        {
            "location": "/#_4",
            "text": "title  info      \u90ae\u7bb1  autuanliu@163.com    GitHub  https://github.com/AutuanLiu      \u5b9d\u5251\u950b\u4ece\u78e8\u783a\u51fa, \u6885\u82b1\u9999\u81ea\u82e6\u5bd2\u6765",
            "title": "\u8054\u7cfb"
        },
        {
            "location": "/\u6570\u636e\u79d1\u5b66/ExploratoryDataAnalysis/",
            "text": "\u63a2\u7d22\u6027\u6570\u636e\u5206\u6790\n\n\n\n\n\n\\begin{align}\n\\label{eq:pythagoras}\nx^2 + y^2 = z^2\n\\end{align} \n\n\n\n\n\\begin{align}\n\\label{eq:pythagoras}\nx^2 + y^2 = z^2\n\\end{align} \n\n\n\n\n\nAs we can see from  \n\\cos(x)\n\\cos(x)\n  all is well in Denmark. \n\n\n\n\n\ny = \\sin(x) \\sum_i^{x^2}\n\n\n\n\ny = \\sin(x) \\sum_i^{x^2}\n\n\n\n\n\n\u540e\u7eed\u66f4\u65b0",
            "title": "\u63a2\u7d22\u6027\u6570\u636e\u5206\u6790"
        },
        {
            "location": "/\u6570\u636e\u79d1\u5b66/ExploratoryDataAnalysis/#_1",
            "text": "\\begin{align}\n\\label{eq:pythagoras}\nx^2 + y^2 = z^2\n\\end{align}   \n\\begin{align}\n\\label{eq:pythagoras}\nx^2 + y^2 = z^2\n\\end{align}    As we can see from   \\cos(x) \\cos(x)   all is well in Denmark.    \ny = \\sin(x) \\sum_i^{x^2}  \ny = \\sin(x) \\sum_i^{x^2}   \u540e\u7eed\u66f4\u65b0",
            "title": "\u63a2\u7d22\u6027\u6570\u636e\u5206\u6790"
        },
        {
            "location": "/\u6570\u636e\u79d1\u5b66/visualization/",
            "text": "\u6570\u636e\u7684\u53ef\u89c6\u5316\u5206\u6790",
            "title": "\u6570\u636e\u53ef\u89c6\u5316\u5206\u6790"
        },
        {
            "location": "/\u6570\u636e\u79d1\u5b66/visualization/#_1",
            "text": "",
            "title": "\u6570\u636e\u7684\u53ef\u89c6\u5316\u5206\u6790"
        },
        {
            "location": "/\u673a\u5668\u5b66\u4e60/LinearSquaresRegression/",
            "text": "",
            "title": "\u6700\u5c0f\u4e8c\u4e58\u56de\u5f52(LSR)"
        },
        {
            "location": "/\u673a\u5668\u5b66\u4e60/LinearDiscriminant/",
            "text": "",
            "title": "\u7ebf\u6027\u5224\u522b\u5206\u6790(LDA)"
        },
        {
            "location": "/\u673a\u5668\u5b66\u4e60/GeneralizedLinearModels/",
            "text": "\u5e7f\u4e49\u7ebf\u6027\u6a21\u578b\n\n\nSklearn \u7684\u5b66\u4e60\u7b14\u8bb0\n\n\n\u5177\u4f53\u5b9e\u73b0\u89c1 \nGitHub\n\n\n1.1.1 \u666e\u901a\u6700\u5c0f\u4e8c\u4e58\u6cd5\n\n\n\n\n\u4f7f \n\u6b8b\u5dee\u5e73\u65b9\u548c\n \u6700\u5c0f\n\n\nLinearRegression \u4f1a\u8c03\u7528 fit \u65b9\u6cd5\u6765\u62df\u5408\u6570\u7ec4 X, y, \u5e76\u4e14\u5c06\u7ebf\u6027\u6a21\u578b\u7684\u7cfb\u6570 w \u5b58\u50a8\u5728\u5176\u6210\u5458\u53d8\u91cf \ncoef_\n\u4e2d\n\n\n\u6700\u5c0f\u4e8c\u4e58\u4f30\u8ba1\u5bf9\u4e8e\u968f\u673a\u8bef\u5dee\u975e\u5e38\u654f\u611f, \u4ea7\u751f\u5f88\u5927\u7684\u65b9\u5dee\n\n\n\u5f62\u5f0f\n$$\n  y = xW^T+b\n$$\n\n\n\n\n1.1.2 \u5cad\u56de\u5f52\n\n\n\n\n\u6700\u5c0f\u5316\u5e26\u6709L2\u6b63\u5219\u9879\u7684\u6b8b\u5dee\u5e73\u65b9\u548c\n\n\nRidgeCV \u901a\u8fc7\u5185\u7f6e\u7684 Alpha \u53c2\u6570\u7684\u4ea4\u53c9\u9a8c\u8bc1\u6765\u5b9e\u73b0\u5cad\u56de\u5f52. \u8be5\u5bf9\u8c61\u4e0e GridSearchCV \u7684\u4f7f\u7528\u65b9\u6cd5\u76f8\u540c, \u53ea\u662f\u5b83\u9ed8\u8ba4\u4e3a Generalized Cross-Validation(\u5e7f\u4e49\u4ea4\u53c9\u9a8c\u8bc1 GCV), \u8fd9\u662f\u4e00\u79cd\u6709\u6548\u7684\u7559\u4e00\u9a8c\u8bc1\u65b9\u6cd5(LOO-CV)\n\n\n\n\n1.1.3 Lasso\n\n\n\n\n\u4f30\u8ba1\u7a00\u758f\u7cfb\u6570\u7684\u7ebf\u6027\u6a21\u578b\n\n\n\u5b83\u5728\u4e00\u4e9b\u60c5\u51b5\u4e0b\u662f\u6709\u7528\u7684, \u56e0\u4e3a\u5b83\u503e\u5411\u4e8e\u4f7f\u7528\u5177\u6709\u8f83\u5c11\u53c2\u6570\u503c\u7684\u60c5\u51b5, \u6709\u6548\u5730\u51cf\u5c11\u7ed9\u5b9a\u89e3\u51b3\u65b9\u6848\u6240\u4f9d\u8d56\u53d8\u91cf\u7684\u6570\u91cf\n\n\nLasso\u53ca\u5176\u53d8\u4f53\u662f\u538b\u7f29\u611f\u77e5\u9886\u57df\u7684\u57fa\u7840. \u5728\u4e00\u5b9a\u6761\u4ef6\u4e0b, \u5b83\u53ef\u4ee5\u6062\u590d\u4e00\u7ec4\u975e\u96f6\u6743\u91cd\u7684\u7cbe\u786e\u96c6\n\n\n\u635f\u5931\u51fd\u6570 \n$$\\min \\frac 1 {2 n_{samples}}||Xw-y||_2^2 +\\alpha||w||_1 $$\n\n\n\u4f7f\u7528\u4e86 coordinate descent (\u5750\u6807\u4e0b\u964d\u7b97\u6cd5)\u6765\u62df\u5408\u7cfb\u6570\n\n\n\u7531\u4e8e Lasso \u56de\u5f52\u4ea7\u751f\u7a00\u758f\u6a21\u578b, \u56e0\u6b64\u53ef\u4ee5\u7528\u4e8e\u6267\u884c\u7279\u5f81\u9009\u62e9\n\n\n\u5bf9\u4e8e\u5177\u6709\u8bb8\u591a\u7ebf\u6027\u56de\u5f52\u7684\u9ad8\u7ef4\u6570\u636e\u96c6,  LassoCV \u6700\u5e38\u89c1\n\n\nLassoLarsCV \u5728\u5bfb\u627e alpha parameter \u53c2\u6570\u503c\u4e0a\u66f4\u5177\u6709\u4f18\u52bf, \u800c\u4e14\u5982\u679c\u6837\u672c\u6570\u91cf\u4e0e\u7279\u5f81\u6570\u91cf\u76f8\u6bd4\u975e\u5e38\u5c0f\u65f6, \u901a\u5e38 LassoLarsCV \u6bd4 LassoCV \u8981\u5feb\n\n\n\u5f53\u4f7f\u7528 k-fold \u4ea4\u53c9\u9a8c\u8bc1\u65f6, \u6b63\u5219\u5316\u8def\u5f84\u53ea\u8ba1\u7b97\u4e00\u6b21\u800c\u4e0d\u662fk + 1\u6b21, \u6240\u4ee5\u627e\u5230\u03b1\u7684\u6700\u4f18\u503c\u662f\u4e00\u79cd\u8ba1\u7b97\u4e0a\u66f4\u4fbf\u5b9c\u7684\u66ff\u4ee3\u65b9\u6cd5\n\n\n\n\n1.1.4 MultiTaskLasso\n\n\n\n\nMultiTaskLasso\u662f\u4e00\u4e2a\u4f30\u8ba1\u591a\u5143\u56de\u5f52\u7a00\u758f\u7cfb\u6570\u7684\u7ebf\u6027\u6a21\u578b\uff1a y \u662f\u4e00\u4e2a (n_samples, n_tasks) \u7684\u4e8c\u7ef4\u6570\u7ec4, \u5176\u7ea6\u675f\u6761\u4ef6\u548c\u5176\u4ed6\u56de\u5f52\u95ee\u9898(\u4e5f\u79f0\u4e3a\u4efb\u52a1)\u662f\u4e00\u6837\u7684, \u90fd\u662f\u6240\u9009\u7684\u7279\u5f81\u503c \n\n\n\n\n1.1.5 \u5f39\u6027\u7f51\n\n\n\n\n\u5f39\u6027\u7f51\u7edc \u662f\u4e00\u79cd\u4f7f\u7528L1,L2\u8303\u6570\u4f5c\u4e3a\u5148\u9a8c\u6b63\u5219\u9879\u8bad\u7ec3\u7684\u7ebf\u6027\u56de\u5f52\u6a21\u578b. \u8fd9\u79cd\u7ec4\u5408\u5141\u8bb8\u5b66\u4e60\u5230\u4e00\u4e2a\u53ea\u6709\u5c11\u91cf\u53c2\u6570\u662f\u975e\u96f6\u7a00\u758f\u7684\u6a21\u578b, \u5c31\u50cf Lasso \u4e00\u6837, \u4f46\u662f\u5b83\u4ecd\u7136\u4fdd\u6301 \u4e00\u4e9b\u50cf Ridge \u7684\u6b63\u5219\u6027\u8d28. \u6211\u4eec\u53ef\u5229\u7528 l1_ratio \u53c2\u6570\u63a7\u5236L1\u548cL2\u7684\u51f8\u7ec4\u5408\n\n\n\u5f39\u6027\u7f51\u7edc\u5728\u5f88\u591a\u7279\u5f81\u4e92\u76f8\u8054\u7cfb\u7684\u60c5\u51b5\u4e0b\u662f\u975e\u5e38\u6709\u7528\u7684\n\n\nLasso\u5f88\u53ef\u80fd\u53ea\u968f\u673a\u8003\u8651\u8fd9\u4e9b\u7279\u5f81\u4e2d\u7684\u4e00\u4e2a, \u800c\u5f39\u6027\u7f51\u7edc\u66f4\u503e\u5411\u4e8e\u9009\u62e9\u4e24\u4e2a\n\n\nloss \n$$\\min \\frac 1 {2 n_{samples}}||Xw-y||_2^2 +\\alpha||w||_1 + \\frac{\\alpha(1-\\rho)} 2 ||w||_2^2 $$\n\n\n\n\nElasticNetCV \u7c7b\u53ef\u4ee5\u901a\u8fc7\u4ea4\u53c9\u9a8c\u8bc1\u6765\u8bbe\u7f6e\u53c2\u6570alpha (\n\\alpha\n\\alpha\n) \u548c l1_ratio (\n\\rho\n\\rho\n) \n\n\n\n\nMultiTaskElasticNet \u662f\u4e00\u4e2a\u5bf9\u591a\u56de\u5f52\u95ee\u9898\u4f30\u7b97\u7a00\u758f\u53c2\u6570\u7684\u5f39\u6027\u7f51\u7edc: Y \u662f\u4e00\u4e2a\u4e8c\u7ef4\u6570\u7ec4, \u5f62\u72b6\u662f (n_samples,n_tasks). \u5176\u9650\u5236\u6761\u4ef6\u662f\u548c\u5176\u4ed6\u56de\u5f52\u95ee\u9898\u4e00\u6837, \u662f\u9009\u62e9\u7684\u7279\u5f81, \u4e5f\u79f0\u4e3a tasks\n\n\n\u91c7\u7528\u4e86\u5750\u6807\u4e0b\u964d\u6cd5\u6c42\u89e3\u53c2\u6570\n\n\n\n\n1.1.7 \u6700\u5c0f\u89d2\u56de\u5f52\n\n\n\n\n\u6700\u5c0f\u89d2\u56de\u5f52 (LARS) \u662f\u5bf9\n\u9ad8\u7ef4\u6570\u636e\n\u7684\u56de\u5f52\u7b97\u6cd5\n\n\nLARS\u548c\u9010\u6b65\u56de\u5f52\u5f88\u50cf. \u5728\u6bcf\u4e00\u6b65, \u5b83\u5bfb\u627e\u4e0e\u54cd\u5e94\u6700\u6709\u5173\u8054\u7684 \u9884\u6d4b. \u5f53\u6709\u5f88\u591a\u9884\u6d4b\u7531\u76f8\u540c\u7684\u5173\u8054\u65f6, \u5b83\u6ca1\u6709\u7ee7\u7eed\u5229\u7528\u76f8\u540c\u7684\u9884\u6d4b, \u800c\u662f\u5728\u8fd9\u4e9b\u9884\u6d4b\u4e2d\u627e\u51fa\u5e94\u8be5\u7b49\u89d2\u7684\u65b9\u5411\n\n\n\u5b83\u5bf9\u566a\u58f0\u975e\u5e38\u654f\u611f\n\n\nLassoLars \u662f\u4e00\u4e2a\u4f7f\u7528LARS\u7b97\u6cd5\u7684lasso\u6a21\u578b,  \u4e0d\u540c\u4e8e\u57fa\u4e8e\u5750\u6807\u4e0b\u964d\u6cd5\u7684\u5b9e\u73b0, \u5b83\u53ef\u4ee5\u5f97\u5230\u4e00\u4e2a\u7cbe\u786e\u89e3, \u4e5f\u5c31\u662f\u4e00\u4e2a \u5173\u4e8e\u81ea\u8eab\u53c2\u6570\u6807\u51c6\u5316\u540e\u7684\u4e00\u4e2a\u5206\u6bb5\u7ebf\u6027\u89e3\n\n\n\n\n1.1.10 \u8d1d\u53f6\u65af\u56de\u5f52\n\n\n\n\n\u8d1d\u53f6\u65af\u56de\u5f52\u53ef\u4ee5\u7528\u4e8e\u5728\u9884\u4f30\u9636\u6bb5\u7684\u53c2\u6570\u6b63\u5219\u5316: \u6b63\u5219\u5316\u53c2\u6570\u7684\u9009\u62e9\u4e0d\u662f\u901a\u8fc7\u4eba\u4e3a\u7684\u9009\u62e9, \u800c\u662f\u901a\u8fc7\u624b\u52a8\u8c03\u8282\u6570\u636e\u503c\u6765\u5b9e\u73b0\n\n\n\u5b83\u80fd\u6839\u636e\u5df2\u6709\u7684\u6570\u636e\u8fdb\u884c\u6539\u53d8. \n\n\n\u5b83\u80fd\u5728\u4f30\u8ba1\u8fc7\u7a0b\u4e2d\u5f15\u5165\u6b63\u5219\u9879. \n\n\n\u5b83\u7684\u63a8\u65ad\u8fc7\u7a0b\u662f\u975e\u5e38\u8017\u65f6\u7684\n\n\n\n\n1.1.10.1 \u8d1d\u53f6\u65af\u5cad\u56de\u5f52\n\n\n\n\n\u53c2\u6570 w, \n\\alpha\n\\alpha\n \u548c \n\\lambda\n\\lambda\n \u662f\u5728\u6a21\u578b\u62df\u5408\u7684\u65f6\u5019\u4e00\u8d77\u88ab\u4f30\u7b97\u51fa\u6765\u7684. \u5269\u4e0b\u7684\u8d85\u53c2\u6570\u5c31\u662f gamma \u5206\u5e03\u7684\u5148\u9a8c\u4e86. \n\\alpha\n\\alpha\n \u548c \n\\lambda\n\\lambda\n . \u5b83\u4eec\u901a\u5e38\u88ab\u9009\u62e9\u4e3a \u6ca1\u6709\u4fe1\u606f\u91cf . \u6a21\u578b\u53c2\u6570\u7684\u4f30\u8ba1\u4e00\u822c\u5229\u7528 \u6700\u5927\u4f3c\u7136\u5bf9\u6570\u4f30\u8ba1\u6cd5 . \n\n\n\\alpha_1 = \\alpha_2 =  \\lambda_1 = \\lambda_2 = 10^{-6}\n\\alpha_1 = \\alpha_2 =  \\lambda_1 = \\lambda_2 = 10^{-6}\n\n\n\u8d1d\u53f6\u65af\u5cad\u56de\u5f52\u5bf9\u75c5\u6001\u95ee\u9898(ill-posed)\u7684\u9c81\u68d2\u6027\u8981\u66f4\u597d\n\n\n\n\n1.1.11 logistic \u56de\u5f52\n\n\n\n\nlogistic \u56de\u5f52\u53c8\u88ab\u79f0\u4f5c logit regression(logit \u56de\u5f52), maximum-entropy classification(MaxEnt, \u6700\u5927\u71b5\u5206\u7c7b), \u6216 log-linear classifier(\u7ebf\u6027\u5bf9\u6570\u5206\u7c7b\u5668)\n\n\n\u8be5\u6a21\u578b\u5229\u7528\u51fd\u6570 logistic function \u5c06\u5355\u6b21\u8bd5\u9a8c(single trial)\u7684\u8f93\u51fa\u8f6c\u5316\u5e76\u63cf\u8ff0\u4e3a\u6982\u7387\n\n\nscikit-learn \u4e2d logistic \u56de\u5f52\u5728 LogisticRegression \u7c7b\u4e2d\u5b9e\u73b0\u4e86\n\u4e8c\u5143(binary)\u3001\u4e00\u5bf9\u4f59(one-vs-rest)\u53ca\u591a\u5143 logistic \u56de\u5f52, \u5e76\u5e26\u6709\u53ef\u9009\u7684 L1 \u548c L2 \u6b63\u5219\u5316\n\n\nliblinear \u5e94\u7528\u4e86\u5750\u6807\u4e0b\u964d\u7b97\u6cd5(Coordinate Descent, CD\n\n\nCD\u7b97\u6cd5\u8bad\u7ec3\u7684\u6a21\u578b\u4e0d\u662f\u771f\u6b63\u610f\u4e49\u4e0a\u7684\u591a\u5206\u7c7b\u6a21\u578b, \u800c\u662f\u57fa\u4e8e one-vs-rest \u601d\u60f3\u5206\u89e3\u4e86\u8fd9\u4e2a\u4f18\u5316\u95ee\u9898, \u4e3a\u6bcf\u4e2a\u7c7b\u522b\u90fd\u8bad\u7ec3\u4e86\u4e00\u4e2a\u4e8c\u5143\u5206\u7c7b\u5668\n\n\nlbfgs, sag \u548c newton-cg solvers (\u6c42\u89e3\u5668)\u53ea\u652f\u6301 L2 \u7f5a\u9879, \u5bf9\u67d0\u4e9b\u9ad8\u7ef4\u6570\u636e\u6536\u655b\u66f4\u5feb. \u8fd9\u4e9b\u6c42\u89e3\u5668\u7684\u53c2\u6570 \nmulti_class\n\u8bbe\u4e3a multinomial \u5373\u53ef\u8bad\u7ec3\u4e00\u4e2a\u771f\u6b63\u7684\u591a\u5143 logistic \u56de\u5f52 , \u5176\u9884\u6d4b\u7684\u6982\u7387\u6bd4\u9ed8\u8ba4\u7684 one-vs-rest \u8bbe\u5b9a\u66f4\u4e3a\u51c6\u786e\n\n\nsag \u6c42\u89e3\u5668\u57fa\u4e8e\u5e73\u5747\u968f\u673a\u68af\u5ea6\u4e0b\u964d\u7b97\u6cd5(Stochastic Average Gradient descent). \u5728\u5927\u6570\u636e\u96c6\u4e0a\u7684\u8868\u73b0\u66f4\u5feb, \u5927\u6570\u636e\u96c6\u6307\u6837\u672c\u91cf\u5927\u4e14\u7279\u5f81\u6570\u591a\n\n\nsaga solver \u662f sag \u7684\u4e00\u7c7b\u53d8\u4f53, \u5b83\u652f\u6301\u975e\u5e73\u6ed1(non-smooth)\u7684 L1 \u6b63\u5219\u9009\u9879 penalty=l1 . \u56e0\u6b64\u5bf9\u4e8e\u7a00\u758f\u591a\u5143 logistic \u56de\u5f52 , \u5f80\u5f80\u9009\u7528\u8be5\u6c42\u89e3\u5668\n\n\n\n\n\n\n\n\n\n\nCase\n\n\nSolver\n\n\n\n\n\n\n\n\n\n\nL1\u6b63\u5219\n\n\nliblinear or saga\n\n\n\n\n\n\n\u591a\u5143\u635f\u5931\n\n\nlbfgs, sag, saga or newton-cg\n\n\n\n\n\n\n\u5927\u6570\u636e\u96c6\n\n\nsag or saga\n\n\n\n\n\n\n\n\n\n\n\n\nsaga \u4e00\u822c\u90fd\u662f\u6700\u4f73\u7684\u9009\u62e9,\u4f46\u51fa\u4e8e\u4e00\u4e9b\u5386\u53f2\u9057\u7559\u539f\u56e0\u9ed8\u8ba4\u7684\u662f liblinear\n\n\n\n\n\n\nSGDClassifier \u548c SGDRegressor \u5206\u522b\u7528\u4e8e\u62df\u5408\u5206\u7c7b\u95ee\u9898\u548c\u56de\u5f52\u95ee\u9898\u7684\u7ebf\u6027\u6a21\u578b, \u53ef\u4f7f\u7528\u4e0d\u540c\u7684(\u51f8)\u635f\u5931\u51fd\u6570, \u652f\u6301\u4e0d\u540c\u7684\u7f5a\u9879\n\n\n\n\n\n\n1.1.13 Perceptron\u611f\u77e5\u673a\n\n\n\n\nPerceptron \u662f\u9002\u7528\u4e8e large scale learning(\u5927\u89c4\u6a21\u5b66\u4e60)\u7684\u4e00\u79cd\u7b80\u5355\u7b97\u6cd5\n\n\n\u4e0d\u9700\u8981\u8bbe\u7f6e\u5b66\u4e60\u7387(learning rate). \n\n\n\u4e0d\u9700\u8981\u6b63\u5219\u5316\u5904\u7406. \n\n\n\u4ec5\u4f7f\u7528\u9519\u8bef\u6837\u672c\u66f4\u65b0\u6a21\u578b\n\n\n\u5408\u9875\u635f\u5931(hinge loss)\u7684\u611f\u77e5\u673a\u6bd4SGD\u7565\u5feb, \u6240\u5f97\u6a21\u578b\u66f4\u7a00\u758f\n\n\n\n\n1.1.16 \u591a\u9879\u5f0f\u56de\u5f52\uff1a\u7528\u57fa\u51fd\u6570\u5c55\u5f00\u7ebf\u6027\u6a21\u578b\n\n\n\n\npolynomial regression \u662f\u7ebf\u6027\u6a21\u578b\u4e2d\u7684\u540c\u4e00\u7c7b, \u6211\u4eec\u8ba4\u4e3a\u4ee5\u4e0a(\u5373\u6a21\u578b\u662f\u7ebf\u6027 ), \u53ef\u4ee5\u7528\u540c\u6837\u7684\u65b9\u6cd5\u89e3\u51b3\n\n\npoly = PolynomialFeatures(degree=2) \u548c poly.fit_transform(X) \u7528\u4e8e\u5b9e\u73b0\u975e\u7ebf\u6027\u5230\u7ebf\u6027\u7684\u8f6c\u6362\n\n\n\u5229\u7528\u591a\u9879\u5f0f\u7279\u5f81\u8bad\u7ec3\u7684\u7ebf\u6027\u6a21\u578b\u80fd\u591f\u51c6\u786e\u5730\u6062\u590d\u8f93\u5165\u591a\u9879\u5f0f\u7cfb\u6570\n\n\n\n\n1.2 \u7ebf\u6027\u548c\u4e8c\u6b21\u5224\u522b\u5206\u6790\n\n\n\n\nLinear Discriminant Analysis(\u7ebf\u6027\u5224\u522b\u5206\u6790)(discriminant_analysis.LinearDiscriminantAnalysis) \u548c Quadratic Discriminant Analysis (\u4e8c\u6b21\u5224\u522b\u5206\u6790)(discriminant_analysis.QuadraticDiscriminantAnalysis) \u662f\u4e24\u4e2a\u7ecf\u5178\u7684\u5206\u7c7b\u5668. \u6b63\u5982\u4ed6\u4eec\u540d\u5b57\u6240\u63cf\u8ff0\u7684\u90a3\u6837, \u4ed6\u4eec\u5206\u522b\u4ee3\u8868\u4e86\n\u7ebf\u6027\u51b3\u7b56\u5e73\u9762\u548c\u4e8c\u6b21\u51b3\u7b56\u5e73\u9762\n\n\n\u5176\u5929\u751f\u7684\u591a\u5206\u7c7b\u7279\u6027, \u5728\u5b9e\u8df5\u4e2d\u5df2\u7ecf\u8bc1\u660e\u5f88\u6709\u6548, \u5e76\u4e14 \n\u4e0d\u9700\u8981\u518d\u6b21\u8c03\u53c2\n\n\n\u7ebf\u6027\u5224\u522b\u5206\u6790\u53ea\u80fd\u5b66\u4e60\u7ebf\u6027\u8fb9\u754c,  \u800c\u4e8c\u6b21\u5224\u522b\u5206\u6790\u5219\u53ef\u4ee5\u5b66\u4e60\u4e8c\u6b21\u51fd\u6570\u7684\u8fb9\u754c, \u56e0\u6b64\u5b83\u76f8\u5bf9\u800c\u8a00\u66f4\u52a0\u7075\u6d3b\n\n\n\u7ebf\u6027\u5224\u522b\u5206\u6790\u964d\u7ef4 \u662f\u603b\u4f53\u800c\u8a00\u5341\u5206\u5f3a\u5927\u7684\u964d\u7ef4\u65b9\u5f0f, \u540c\u6837\u4e5f \n\u4ec5\u4ec5\u5728\u591a\u5206\u7c7b\u73af\u5883\u4e0b\u624d\u4f1a\u8d77\u4f5c\u7528\n\n\ndiscriminant_analysis.LinearDiscriminantAnalysis.transform\n\n\nLDA \u5206\u7c7b\u5668\u4e2d\u5b58\u5728\u4e00\u4e2a\u5229\u7528\u7ebf\u6027\u6295\u5f71\u5230 K-1 \u4e2a\u7ef4\u5ea6\u7a7a\u95f4\u7684\u964d\u7ef4\u5de5\u5177\n\n\n\u6536\u7f29\u662f\u4e00\u4e2a\u5728\u8bad\u7ec3\u6837\u672c\u6570\u91cf\u76f8\u6bd4\u7279\u5f81\u800c\u8a00\u5f88\u5c0f\u7684\u60c5\u51b5\u4e0b\u53ef\u4ee5\u63d0\u5347\u9884\u6d4b(\u51c6\u786e\u6027)\u7684\u534f\u65b9\u5dee\u77e9\u9635\n\n\nLDA \u6536\u7f29\u53ef\u4ee5\u901a\u8fc7\u8bbe\u7f6e discriminant_analysis.LinearDiscriminantAnalysis \u7c7b\u7684 shrinkage \u53c2\u6570\u4e3a \u2018auto\u2019 \u4ee5\u5f97\u5230\u5e94\u7528. \n\n\n\n\n1.3 \u6838\u5cad\u56de\u5f52\n\n\n\n\nKernel ridge regression (KRR) (\u5185\u6838\u5cad\u56de\u5f52\u7531 \u4f7f\u7528\u5185\u6838\u65b9\u6cd5\u7684 (\u5cad\u56de\u5f52)(\u4f7f\u7528 l2 \u6b63\u5219\u5316\u7684\u6700\u5c0f\u4e8c\u4e58\u6cd5)\u6240\u7ec4\u6210. \u56e0\u6b64, \u5b83\u6240\u5b66\u4e60\u5230\u7684\u5728\u7a7a\u95f4\u4e2d\u4e0d\u540c\u7684\u7ebf\u6027\u51fd\u6570\u662f\u7531\u4e0d\u540c\u7684\u5185\u6838\u548c\u6570\u636e\u6240\u5bfc\u81f4\u7684. \u5bf9\u4e8e\u975e\u7ebf\u6027\u7684\u5185\u6838, \u5b83\u4e0e\u539f\u59cb\u7a7a\u95f4\u4e2d\u7684\u975e\u7ebf\u6027\u51fd\u6570\u76f8\u5bf9\u5e94\n\n\n\u7531 KernelRidge \u5b66\u4e60\u7684\u6a21\u578b\u7684\u5f62\u5f0f\u4e0e\u652f\u6301\u5411\u91cf\u56de\u5f52( SVR ) \u662f\u4e00\u6837\u7684. \u4f46\u662f\u4ed6\u4eec\u4f7f\u7528\u4e0d\u540c\u7684\u635f\u5931\u51fd\u6570\uff1a\u5185\u6838\u5cad\u56de\u5f52(KRR)\u4f7f\u7528 squared error loss (\u5e73\u65b9\u8bef\u5dee\u635f\u5931\u51fd\u6570)\u800c support vector regression (\u652f\u6301\u5411\u91cf\u56de\u5f52)(SVR)\u4f7f\u7528 \n\\epsilon\n\\epsilon\n -insensitive loss , \u4e24\u8005\u90fd\u4f7f\u7528 l2 regularization (l2 \u6b63\u5219\u5316). \u4e0e SVR \u76f8\u53cd, \u62df\u5408 KernelRidge \u53ef\u4ee5\u4ee5 closed-form (\u5c01\u95ed\u5f62\u5f0f)\u5b8c\u6210, \u5bf9\u4e8e\u4e2d\u578b\u6570\u636e\u96c6\u901a\u5e38\u66f4\u5feb. \u53e6\u4e00\u65b9\u9762, \u5b66\u4e60\u7684\u6a21\u578b\u662f\u975e\u7a00\u758f\u7684, \u56e0\u6b64\u6bd4 SVR \u6162,  \u5728\u9884\u6d4b\u65f6\u95f4, SVR \u5b66\u4e60\u4e86 \n\\epsilon>0\n\\epsilon>0\n \u7684\u7a00\u758f\u6a21\u578b. \n\n\n\u5b83\u4eec\u7684 learned functions (\u5b66\u4e60\u51fd\u6570)\u975e\u5e38\u76f8\u4f3c;\u4f46\u662f, \u62df\u5408 KernelRidge \u5927\u7ea6\u6bd4\u62df\u5408 SVR \u5feb\u4e03\u500d(\u90fd\u4f7f\u7528 grid-search ( \u7f51\u683c\u641c\u7d22 ) ). \u7136\u800c, \u7531\u4e8e SVR \u53ea\u5b66\u4e60\u4e86\u4e00\u4e2a\u7a00\u758f\u6a21\u578b, \u6240\u4ee5 SVR \u9884\u6d4b 10 \u4e07\u4e2a\u76ee\u6807\u503c\u6bd4\u4f7f\u7528 KernelRidge \u5feb\u4e09\u500d\u4ee5\u4e0a. SVR \u53ea\u4f7f\u7528\u4e86\u767e\u5206\u4e4b\u4e09\u5341\u7684\u6570\u636e\u70b9\u505a\u4e3a\u652f\u6491\u5411\u91cf\n\n\n\u5bf9\u4e8e\u4e2d\u578b\u8bad\u7ec3\u96c6(\u5c0f\u4e8e 1000 \u4e2a\u6837\u672c), \u62df\u5408 KernelRidge \u6bd4 SVR \u5feb; \u7136\u800c, \u5bf9\u4e8e\u66f4\u5927\u7684\u8bad\u7ec3\u96c6 SVR \u901a\u5e38\u66f4\u597d. \u5173\u4e8e\u9884\u6d4b\u65f6\u95f4, \u7531\u4e8e\u5b66\u4e60\u7684\u7a00\u758f\u89e3, SVR \u5bf9\u4e8e\u6240\u6709\u4e0d\u540c\u5927\u5c0f\u7684\u8bad\u7ec3\u96c6\u90fd\u6bd4 KernelRidge \u5feb\n\n\n\u7a00\u758f\u89e3\n\u662f\u8bf4\u53ea\u4f7f\u7528\u4e00\u90e8\u5206\u7279\u5f81\u4f5c\u4e3a\u5173\u952e\u8bad\u7ec3\u7279\u5f81\n\n\n\n\n1.4 SVM\n\n\n\u652f\u6301\u5411\u91cf\u673a\u53ef\u4ee5\u7528\u4e8e \n\u5206\u7c7b, \u56de\u5f52, \u5f02\u5e38\u68c0\u6d4b\n\n\n\u4f18\u52bf:\n\n\n\n\n\u5728\u9ad8\u7ef4\u7a7a\u95f4\u4e2d\u975e\u5e38\u9ad8\u6548\n\n\n\u5373\u4f7f\u5728\n\u6570\u636e\u7ef4\u5ea6\u6bd4\u6837\u672c\u6570\u91cf\u5927\n\u7684\u60c5\u51b5\u4e0b\u4ecd\u7136\u6709\u6548\n\n\n\u5728\u51b3\u7b56\u51fd\u6570(\u79f0\u4e3a\u652f\u6301\u5411\u91cf)\u4e2d\u4f7f\u7528\u8bad\u7ec3\u96c6\u7684\u5b50\u96c6\n\n\n\u901a\u7528\u6027: \u4e0d\u540c\u7684\u6838\u51fd\u6570\u4e0e\u7279\u5b9a\u7684\u51b3\u7b56\u51fd\u6570\u4e00\u4e00\u5bf9\u5e94\n\n\n\n\n\u52a3\u52bf:\n\n\n\n\n\u5982\u679c\u7279\u5f81\u6570\u91cf\u6bd4\u6837\u672c\u6570\u91cf\u5927\u5f97\u591a, \u5728\u9009\u62e9\u6838\u51fd\u6570\u65f6\u8981\u907f\u514d\u8fc7\u62df\u5408\n\n\n\n\n\u5f53\u7c7b\u522b\u4e0d\u5747\u8861\u65f6, \u4f7f\u7528\u5e26\u6709 \u7c7b\u522b\u6743\u91cd\u7684 \n\n\nwclf = svm.SVC(kernel='linear', class_weight={1: 10})\n\n\n\n\n\u652f\u6301\u5411\u91cf\u5206\u7c7b\u7684\u65b9\u6cd5\u53ef\u4ee5\u88ab\u6269\u5c55\u7528\u4f5c\u89e3\u51b3\u56de\u5f52\u95ee\u9898. \u8fd9\u4e2a\u65b9\u6cd5\u88ab\u79f0\u4f5c\u652f\u6301\u5411\u91cf\u56de\u5f52. \u652f\u6301\u5411\u91cf\u5206\u7c7b\u751f\u6210\u7684\u6a21\u578b\u53ea\u4f9d\u8d56\u4e8e\u8bad\u7ec3\u96c6\u7684\u5b50\u96c6,\u56e0\u4e3a\u6784\u5efa\u6a21\u578b\u7684 cost function \u4e0d\u5728\u4e4e\u8fb9\n\u7f18\u4e4b\u5916\u7684\u8bad\u7ec3\u70b9. \u7c7b\u4f3c\u7684, \u652f\u6301\u5411\u91cf\u56de\u5f52\u751f\u6210\u7684\u6a21\u578b\u53ea\u4f9d\u8d56\u4e8e\u8bad\u7ec3\u96c6\u7684\u5b50\u96c6, \u56e0\u4e3a\u6784\u5efa\u6a21\u578b\u7684 cost function \u5ffd\u7565\u4efb\u4f55\u63a5\u8fd1\u4e8e\u6a21\u578b\u9884\u6d4b\u7684\u8bad\u7ec3\u6570\u636e. SVM\u7684\u6838\u5fc3\u662f\u4e00\u4e2a\u4e8c\u6b21\u89c4\u5212\n\u95ee\u9898(Quadratic Programming, QP), \u662f\u5c06\u652f\u6301\u5411\u91cf\u548c\u8bad\u7ec3\u6570\u636e\u7684\u5176\u4f59\u90e8\u5206\u5206\u79bb\u5f00\u6765, \u652f\u6301\u5411\u91cf\u673a\u662f\u4e2a\u5f3a\u5927\u7684\u5de5\u5177, \u4e0d\u8fc7\u5b83\u7684\u8ba1\u7b97\u548c\u5b58\u50a8\u7a7a\u95f4\u8981\u6c42\u4e5f\u4f1a\u968f\u7740\u8981\u8bad\u7ec3\u5411\u91cf\u7684\u6570\u76ee\u589e\n\u52a0\u800c\u5feb\u901f\u589e\u52a0\n\n\n\n\n\u60e9\u7f5a\u7cfb\u6570C\u7684\u8bbe\u7f6e:\u5728\u5408\u7406\u7684\u60c5\u51b5\u4e0b, C \u7684\u9ed8\u8ba4\u9009\u62e9\u4e3a 1. \u5982\u679c\u60a8\u6709\u5f88\u591a\u6df7\u6742\u7684\u89c2\u5bdf\u6570\u636e, \u60a8\u5e94\u8be5\u8981\u53bb\u8c03\u5c0f\u5b83. C \u8d8a\u5c0f, \u5c31\u80fd\u66f4\u597d\u5730\u53bb\u6b63\u89c4\u5316\u4f30\u8ba1\n\n\n\u5e38\u7528\u6838\u51fd\u6570\n\n\n\u7ebf\u6027 \nk(x_i, x_j) = x_i^T x_j\nk(x_i, x_j) = x_i^T x_j\n<span><span class=\"MathJax_Preview\">k(x_i, x_j) = x_i^T x_j</span><script type=\"math/tex\">k(x_i, x_j) = x_i^T x_j\n\n\n\u591a\u9879\u5f0f \nk(x_i, x_j) = (x_i^T x_j)^d\nk(x_i, x_j) = (x_i^T x_j)^d\n<span><span class=\"MathJax_Preview\">k(x_i, x_j) = (x_i^T x_j)^d</span><script type=\"math/tex\">k(x_i, x_j) = (x_i^T x_j)^d\n\n\n\u9ad8\u65af\u6838rbf \nk(x_i, x_j) = exp(-\\frac{||x_i - x_j||^2}{2 \\sigma^2})\nk(x_i, x_j) = exp(-\\frac{||x_i - x_j||^2}{2 \\sigma^2})\n<span><span class=\"MathJax_Preview\">k(x_i, x_j) = exp(-\\frac{||x_i - x_j||^2}{2 \\sigma^2})</span><script type=\"math/tex\">k(x_i, x_j) = exp(-\\frac{||x_i - x_j||^2}{2 \\sigma^2})\n\n\n\u62c9\u666e\u62c9\u65af \nk(x_i, x_j) = exp(-\\frac{||x_i - x_j||}{\\sigma})\nk(x_i, x_j) = exp(-\\frac{||x_i - x_j||}{\\sigma})\n<span><span class=\"MathJax_Preview\">k(x_i, x_j) = exp(-\\frac{||x_i - x_j||}{\\sigma})</span><script type=\"math/tex\">k(x_i, x_j) = exp(-\\frac{||x_i - x_j||}{\\sigma})\n\n\nsigmoid \nk(x_i, x_j) = \\tanh(\\beta x_i^T x_j + \\theta)\nk(x_i, x_j) = \\tanh(\\beta x_i^T x_j + \\theta)\n<span><span class=\"MathJax_Preview\">k(x_i, x_j) = \\tanh(\\beta x_i^T x_j + \\theta)</span><script type=\"math/tex\">k(x_i, x_j) = \\tanh(\\beta x_i^T x_j + \\theta)\n\n\n\n\n\u6838\u51fd\u6570\u901a\u8fc7\u521b\u5efa\u5b9e\u4f8b\u65f6\u8fdb\u884c\u6307\u5b9a svm.SVC(kernel='linear')\n\n\n\n\n\n\n\u81ea\u5b9a\u4e49\u6838\u51fd\u6570\n\n\n\n\n\n\ndef my_kernel(x, y):\n  return np.dot(x, y.T)\n\n\n\n\n\n\n\u5f53\u7528 \u5f84\u5411\u57fa(RBF)\u5185\u6838\u53bb\u8bad\u7ec3 SVM, \u6709\u4e24\u4e2a\u53c2\u6570\u5fc5\u987b\u8981\u53bb\u8003\u8651: C, \n\\gamma\n\\gamma\n. \u8f83\u5c0f\u7684 C \u4f1a\u4f7f\u51b3\u7b56\u8868\u9762\u66f4\u5e73\u6ed1, \u540c\u65f6\u8f83\u9ad8\u7684 C \u65e8\u5728\u6b63\u786e\u5730\u5206\u7c7b\u6240\u6709\u8bad\u7ec3\u6837\u672c. Gamma \u5b9a\u4e49\u4e86\u5355\u4e00 \u8bad\u7ec3\u6837\u672c\u80fd\u8d77\u5230\u591a\u5927\u7684\u5f71\u54cd. \u8f83\u5927\u7684 gamma \u4f1a\u66f4\u8ba9\u5176\u4ed6\u6837\u672c\u53d7\u5230\u5f71\u54cd\n\n\n\n\n1.5 \u968f\u673a\u68af\u5ea6\u4e0b\u964d\n\n\n\n\nSGD \u5bf9\u7279\u5f81\u7f29\u653e \u654f\u611f\n\n\n\u5fc5\u987b\u5c06 \u76f8\u540c \u7684\u7f29\u653e\u5e94\u7528\u4e8e\u5bf9\u5e94\u7684\u6d4b\u8bd5\u5411\u91cf\u4e2d\uff0c\u4ee5\u83b7\u5f97\u6709\u610f\u4e49\u7684\u7ed3\u679c\n\n\n\u5728\u62df\u5408\u6a21\u578b\u524d\u8981\u786e\u4fdd\u8bad\u7ec3\u6570\u636e\u7ecf\u8fc7\u4e86\u6253\u4e71 \nshuffle=True\n\n\n\n\nfrom sklearn.linear_model import SGDClassifier\n\nX = [[0, 0], [1, 1]]\ny = [0, 1]\n\nclf = SGDClassifier(loss='hinge', penalty='l2', max_iter=500, tol=1e-3)\nclf.fit(X, y)\n# prediction\nres = clf.predict([[2, 2]])\nprint(res)\n\n\n\n\n\n\nSGDClassifier \u901a\u8fc7\u5728\u5c06\u591a\u4e2a binary classifiers\u7ec4\u5408\u5728 one versus all(OVA) \u65b9\u6848\u4e2d\u6765\u652f\u6301\u591a\u7c7b\u5206\u7c7b\n\n\nSGDRegressor \u7c7b\u5b9e\u73b0\u4e86\u4e00\u4e2a\u7b80\u5355\u7684\u968f\u5373\u68af\u5ea6\u4e0b\u964d\u5b66\u4e60\u7a0b\u5e8f, \u5b83\u652f\u6301\u4e0d\u540c\u7684\u635f\u5931\u51fd\u6570\u548c\u60e9\u7f5a\u6765\u62df\u5408\u7ebf\u6027\u56de\u5f52\u6a21\u578b\n\n\n\n\n1.6 \u6700\u8fd1\u90bb\n\n\n\n\n\u65e0\u76d1\u7763\u7684\u6700\u8fd1\u90bb\u662f\u8bb8\u591a\u5176\u5b83\u5b66\u4e60\u65b9\u6cd5\u7684\u57fa\u7840, \u5c24\u5176\u662f manifold learning \u548c spectral clustering\n\n\n\u53d7\u76d1\u7763\u7684 neighbors-based\u5b66\u4e60\u5206\u4e3a\u4e24\u79cd classification \u9488\u5bf9\u7684\u662f\u5177\u6709\u79bb\u6563\u6807\u7b7e\u7684\u6570\u636e, regression \u9488\u5bf9\u7684\u662f\u5177\u6709\u8fde\u7eed\u6807\u7b7e\u7684\u6570\u636e\n\n\n\u975e\u53c2\u6570\u65b9\u6cd5\n\n\n\u5e94\u7528\u4e8e\u51b3\u7b56\u8fb9\u754c\u975e\u5e38\u4e0d\u89c4\u5219\u7684\u60c5\u666f\u4e0b\n\n\n\n\n\u6700\u8fd1\u90bb\u5206\u7c7b\n\n\n\n\n\u5206\u7c7b\u662f\u7531\u6bcf\u4e2a\u70b9\u7684\u6700\u8fd1\u90bb\u7684\u7b80\u5355\u591a\u6570\u6295\u7968\u4e2d\u8ba1\u7b97\u5f97\u5230\u7684\n\n\n\u4e00\u4e2a\u67e5\u8be2\u70b9\u7684\u6570\u636e\u7c7b\u578b\u662f\u7531\u5b83\u6700\u8fd1\u90bb\u70b9\u4e2d\u6700\u5177\u4ee3\u8868\u6027\u7684\u6570\u636e\u7c7b\u578b\u6765\u51b3\u5b9a\u7684\n\n\nk \u503c\u7684\u6700\u4f73\u9009\u62e9\u662f\u9ad8\u5ea6\u6570\u636e\u4f9d\u8d56\u7684\n\n\n\u901a\u5e38\u8f83\u5927\u7684 k \u662f\u4f1a\u6291\u5236\u566a\u58f0\u7684\u5f71\u54cd, \u4f46\u662f\u4f7f\u5f97\u5206\u7c7b\u754c\u9650\u4e0d\u660e\u663e\n\n\n\u5982\u679c\u6570\u636e\u662f\u4e0d\u5747\u5300\u91c7\u6837\u7684, \u90a3\u4e48 RadiusNeighborsClassifier \u4e2d\u7684\u57fa\u4e8e\u534a\u5f84\u7684\u8fd1\u90bb\u5206\u7c7b\u53ef\u80fd\u662f\u66f4\u597d\u7684\u9009\u62e9\n\n\n\u6307\u5b9a\u4e00\u4e2a\u56fa\u5b9a\u534a\u5f84 r, \u4f7f\u5f97\u7a00\u758f\u90bb\u5c45\u4e2d\u7684\u70b9\u4f7f\u7528\u8f83\u5c11\u7684\u6700\u8fd1\u90bb\u6765\u5206\u7c7b\n\n\n\n\n\u6700\u8fd1\u90bb\u56de\u5f52\n\n\n\n\n\u6700\u8fd1\u90bb\u56de\u5f52\u662f\u7528\u5728\u6570\u636e\u6807\u7b7e\u4e3a\u8fde\u7eed\u53d8\u91cf, \u800c\u4e0d\u662f\u79bb\u6563\u53d8\u91cf\u7684\u60c5\u51b5\u4e0b\n\n\n\u5206\u914d\u7ed9\u67e5\u8be2\u70b9\u7684\u6807\u7b7e\u662f\u7531\u5b83\u7684 \n\u6700\u8fd1\u90bb\u6807\u7b7e\u7684\u5747\u503c\n \u8ba1\u7b97\u800c\u6765\u7684\n\n\n\u5728\u67d0\u4e9b\u73af\u5883\u4e0b, \u589e\u52a0\u6743\u91cd\u53ef\u80fd\u662f\u6709\u5229\u7684, \u4f7f\u5f97\u9644\u8fd1\u70b9\u5bf9\u4e8e\u56de\u5f52\u6240\u4f5c\u51fa\u7684\u8d21\u732e\u591a\u4e8e\u8fdc\u5904\u70b9. \u8fd9\u53ef\u4ee5\u901a\u8fc7 weights \u5173\u952e\u5b57\u6765\u5b9e\u73b0\n\n\n\u9ad8\u65af\u8fc7\u7a0b\u662f\u4e00\u79cd\u5e38\u7528\u7684\u76d1\u7763\u5b66\u4e60\u65b9\u6cd5\uff0c\u65e8\u5728\u89e3\u51b3 \n\u56de\u5f52\u95ee\u9898\n \u548c \n\u6982\u7387\u5206\u7c7b\u95ee\u9898\n\n\n\n\n1.8 \u4ea4\u53c9\u5206\u89e3\n\n\n\n\n\u504f\u6700\u5c0f\u4e8c\u4e58\u6cd5(PLS)\u548c\u5178\u578b\u76f8\u5173\u5206\u6790(CCA)\n\n\n\u5177\u6709\u53d1\u73b0\u4e24\u4e2a\u591a\u5143\u6570\u636e\u96c6\u4e4b\u95f4\u7684\u7ebf\u6027\u5173\u7cfb\n \u7684\u7528\u9014: fit method(\u62df\u5408\u65b9\u6cd5)\u7684\u53c2\u6570 X \u548c Y \u90fd\u662f 2 \u7ef4\u6570\u7ec4 \n\n\n\n\n1.9 \u6734\u7d20\u8d1d\u53f6\u65af\n\n\n\n\n\u6734\u7d20\u8d1d\u53f6\u65af\u65b9\u6cd5\u662f\u57fa\u4e8e\u8d1d\u53f6\u65af\u5b9a\u7406\u7684\u4e00\u7ec4\u6709\u76d1\u7763\u5b66\u4e60\u7b97\u6cd5\n\n\n\u7b80\u5355\u5730\u5047\u8bbe \n\u6bcf\u5bf9\u7279\u5f81\u4e4b\u95f4\u76f8\u4e92\u72ec\u7acb\n, \u6734\u7d20\u7684\u7531\u6765\n\n\n\u9ad8\u65af\u6734\u7d20\u8d1d\u53f6\u65af \u7684\u53c2\u6570\u4f7f\u7528 \u6700\u5927\u4f3c\u7136\u4f30\u8ba1\n\n\n\u591a\u9879\u5206\u5e03\u6734\u7d20\u8d1d\u53f6\u65af\n\n\n\u4f2f\u52aa\u5229\u6734\u7d20\u8d1d\u53f6\u65af\n\n\n\u5806\u5916\u6734\u7d20\u8d1d\u53f6\u65af\u6a21\u578b\u62df\u5408\n\n\n\n\n1.10 \u51b3\u7b56\u6811\n\n\n\n\n\u65e0\u53c2\u76d1\u7763\u5b66\u4e60\u65b9\u6cd5\n\n\n\u56de\u5f52\u4e0e\u5206\u7c7b\n\n\n\u76ee\u7684\u662f\u521b\u5efa\u4e00\u79cd\u6a21\u578b\u4ece\u6570\u636e\u7279\u5f81\u4e2d\u5b66\u4e60\u7b80\u5355\u7684\u51b3\u7b56\u89c4\u5219\u6765\u9884\u6d4b\u4e00\u4e2a\u76ee\u6807\u53d8\u91cf\u7684\u503c\n\n\n\u51b3\u7b56\u6811\u6a21\u578b\u5bb9\u6613\u4ea7\u751f\u4e00\u4e2a\u8fc7\u4e8e\u590d\u6742\u7684\u6a21\u578b, \u8fd9\u6837\u7684\u6a21\u578b\u5bf9\u6570\u636e\u7684\u6cdb\u5316\u6027\u80fd\u4f1a\u5f88\u5dee\n\n\n\u51b3\u7b56\u6811\u53ef\u80fd\u662f\u4e0d\u7a33\u5b9a\u7684, \u56e0\u4e3a\u6570\u636e\u4e2d\u7684\u5fae\u5c0f\u53d8\u5316\u53ef\u80fd\u4f1a\u5bfc\u81f4\u5b8c\u5168\u4e0d\u540c\u7684\u6811\u751f\u6210\n\n\n\n\n1.11 \u96c6\u6210\u65b9\u6cd5",
            "title": "\u5e7f\u4e49\u7ebf\u6027\u6a21\u578b(GLM)"
        },
        {
            "location": "/\u673a\u5668\u5b66\u4e60/GeneralizedLinearModels/#_1",
            "text": "Sklearn \u7684\u5b66\u4e60\u7b14\u8bb0  \u5177\u4f53\u5b9e\u73b0\u89c1  GitHub",
            "title": "\u5e7f\u4e49\u7ebf\u6027\u6a21\u578b"
        },
        {
            "location": "/\u673a\u5668\u5b66\u4e60/GeneralizedLinearModels/#111",
            "text": "\u4f7f  \u6b8b\u5dee\u5e73\u65b9\u548c  \u6700\u5c0f  LinearRegression \u4f1a\u8c03\u7528 fit \u65b9\u6cd5\u6765\u62df\u5408\u6570\u7ec4 X, y, \u5e76\u4e14\u5c06\u7ebf\u6027\u6a21\u578b\u7684\u7cfb\u6570 w \u5b58\u50a8\u5728\u5176\u6210\u5458\u53d8\u91cf  coef_ \u4e2d  \u6700\u5c0f\u4e8c\u4e58\u4f30\u8ba1\u5bf9\u4e8e\u968f\u673a\u8bef\u5dee\u975e\u5e38\u654f\u611f, \u4ea7\u751f\u5f88\u5927\u7684\u65b9\u5dee  \u5f62\u5f0f\n$$\n  y = xW^T+b\n$$",
            "title": "1.1.1 \u666e\u901a\u6700\u5c0f\u4e8c\u4e58\u6cd5"
        },
        {
            "location": "/\u673a\u5668\u5b66\u4e60/GeneralizedLinearModels/#112",
            "text": "\u6700\u5c0f\u5316\u5e26\u6709L2\u6b63\u5219\u9879\u7684\u6b8b\u5dee\u5e73\u65b9\u548c  RidgeCV \u901a\u8fc7\u5185\u7f6e\u7684 Alpha \u53c2\u6570\u7684\u4ea4\u53c9\u9a8c\u8bc1\u6765\u5b9e\u73b0\u5cad\u56de\u5f52. \u8be5\u5bf9\u8c61\u4e0e GridSearchCV \u7684\u4f7f\u7528\u65b9\u6cd5\u76f8\u540c, \u53ea\u662f\u5b83\u9ed8\u8ba4\u4e3a Generalized Cross-Validation(\u5e7f\u4e49\u4ea4\u53c9\u9a8c\u8bc1 GCV), \u8fd9\u662f\u4e00\u79cd\u6709\u6548\u7684\u7559\u4e00\u9a8c\u8bc1\u65b9\u6cd5(LOO-CV)",
            "title": "1.1.2 \u5cad\u56de\u5f52"
        },
        {
            "location": "/\u673a\u5668\u5b66\u4e60/GeneralizedLinearModels/#113-lasso",
            "text": "\u4f30\u8ba1\u7a00\u758f\u7cfb\u6570\u7684\u7ebf\u6027\u6a21\u578b  \u5b83\u5728\u4e00\u4e9b\u60c5\u51b5\u4e0b\u662f\u6709\u7528\u7684, \u56e0\u4e3a\u5b83\u503e\u5411\u4e8e\u4f7f\u7528\u5177\u6709\u8f83\u5c11\u53c2\u6570\u503c\u7684\u60c5\u51b5, \u6709\u6548\u5730\u51cf\u5c11\u7ed9\u5b9a\u89e3\u51b3\u65b9\u6848\u6240\u4f9d\u8d56\u53d8\u91cf\u7684\u6570\u91cf  Lasso\u53ca\u5176\u53d8\u4f53\u662f\u538b\u7f29\u611f\u77e5\u9886\u57df\u7684\u57fa\u7840. \u5728\u4e00\u5b9a\u6761\u4ef6\u4e0b, \u5b83\u53ef\u4ee5\u6062\u590d\u4e00\u7ec4\u975e\u96f6\u6743\u91cd\u7684\u7cbe\u786e\u96c6  \u635f\u5931\u51fd\u6570 \n$$\\min \\frac 1 {2 n_{samples}}||Xw-y||_2^2 +\\alpha||w||_1 $$  \u4f7f\u7528\u4e86 coordinate descent (\u5750\u6807\u4e0b\u964d\u7b97\u6cd5)\u6765\u62df\u5408\u7cfb\u6570  \u7531\u4e8e Lasso \u56de\u5f52\u4ea7\u751f\u7a00\u758f\u6a21\u578b, \u56e0\u6b64\u53ef\u4ee5\u7528\u4e8e\u6267\u884c\u7279\u5f81\u9009\u62e9  \u5bf9\u4e8e\u5177\u6709\u8bb8\u591a\u7ebf\u6027\u56de\u5f52\u7684\u9ad8\u7ef4\u6570\u636e\u96c6,  LassoCV \u6700\u5e38\u89c1  LassoLarsCV \u5728\u5bfb\u627e alpha parameter \u53c2\u6570\u503c\u4e0a\u66f4\u5177\u6709\u4f18\u52bf, \u800c\u4e14\u5982\u679c\u6837\u672c\u6570\u91cf\u4e0e\u7279\u5f81\u6570\u91cf\u76f8\u6bd4\u975e\u5e38\u5c0f\u65f6, \u901a\u5e38 LassoLarsCV \u6bd4 LassoCV \u8981\u5feb  \u5f53\u4f7f\u7528 k-fold \u4ea4\u53c9\u9a8c\u8bc1\u65f6, \u6b63\u5219\u5316\u8def\u5f84\u53ea\u8ba1\u7b97\u4e00\u6b21\u800c\u4e0d\u662fk + 1\u6b21, \u6240\u4ee5\u627e\u5230\u03b1\u7684\u6700\u4f18\u503c\u662f\u4e00\u79cd\u8ba1\u7b97\u4e0a\u66f4\u4fbf\u5b9c\u7684\u66ff\u4ee3\u65b9\u6cd5",
            "title": "1.1.3 Lasso"
        },
        {
            "location": "/\u673a\u5668\u5b66\u4e60/GeneralizedLinearModels/#114-multitasklasso",
            "text": "MultiTaskLasso\u662f\u4e00\u4e2a\u4f30\u8ba1\u591a\u5143\u56de\u5f52\u7a00\u758f\u7cfb\u6570\u7684\u7ebf\u6027\u6a21\u578b\uff1a y \u662f\u4e00\u4e2a (n_samples, n_tasks) \u7684\u4e8c\u7ef4\u6570\u7ec4, \u5176\u7ea6\u675f\u6761\u4ef6\u548c\u5176\u4ed6\u56de\u5f52\u95ee\u9898(\u4e5f\u79f0\u4e3a\u4efb\u52a1)\u662f\u4e00\u6837\u7684, \u90fd\u662f\u6240\u9009\u7684\u7279\u5f81\u503c",
            "title": "1.1.4 MultiTaskLasso"
        },
        {
            "location": "/\u673a\u5668\u5b66\u4e60/GeneralizedLinearModels/#115",
            "text": "\u5f39\u6027\u7f51\u7edc \u662f\u4e00\u79cd\u4f7f\u7528L1,L2\u8303\u6570\u4f5c\u4e3a\u5148\u9a8c\u6b63\u5219\u9879\u8bad\u7ec3\u7684\u7ebf\u6027\u56de\u5f52\u6a21\u578b. \u8fd9\u79cd\u7ec4\u5408\u5141\u8bb8\u5b66\u4e60\u5230\u4e00\u4e2a\u53ea\u6709\u5c11\u91cf\u53c2\u6570\u662f\u975e\u96f6\u7a00\u758f\u7684\u6a21\u578b, \u5c31\u50cf Lasso \u4e00\u6837, \u4f46\u662f\u5b83\u4ecd\u7136\u4fdd\u6301 \u4e00\u4e9b\u50cf Ridge \u7684\u6b63\u5219\u6027\u8d28. \u6211\u4eec\u53ef\u5229\u7528 l1_ratio \u53c2\u6570\u63a7\u5236L1\u548cL2\u7684\u51f8\u7ec4\u5408  \u5f39\u6027\u7f51\u7edc\u5728\u5f88\u591a\u7279\u5f81\u4e92\u76f8\u8054\u7cfb\u7684\u60c5\u51b5\u4e0b\u662f\u975e\u5e38\u6709\u7528\u7684  Lasso\u5f88\u53ef\u80fd\u53ea\u968f\u673a\u8003\u8651\u8fd9\u4e9b\u7279\u5f81\u4e2d\u7684\u4e00\u4e2a, \u800c\u5f39\u6027\u7f51\u7edc\u66f4\u503e\u5411\u4e8e\u9009\u62e9\u4e24\u4e2a  loss \n$$\\min \\frac 1 {2 n_{samples}}||Xw-y||_2^2 +\\alpha||w||_1 + \\frac{\\alpha(1-\\rho)} 2 ||w||_2^2 $$   ElasticNetCV \u7c7b\u53ef\u4ee5\u901a\u8fc7\u4ea4\u53c9\u9a8c\u8bc1\u6765\u8bbe\u7f6e\u53c2\u6570alpha ( \\alpha \\alpha ) \u548c l1_ratio ( \\rho \\rho )    MultiTaskElasticNet \u662f\u4e00\u4e2a\u5bf9\u591a\u56de\u5f52\u95ee\u9898\u4f30\u7b97\u7a00\u758f\u53c2\u6570\u7684\u5f39\u6027\u7f51\u7edc: Y \u662f\u4e00\u4e2a\u4e8c\u7ef4\u6570\u7ec4, \u5f62\u72b6\u662f (n_samples,n_tasks). \u5176\u9650\u5236\u6761\u4ef6\u662f\u548c\u5176\u4ed6\u56de\u5f52\u95ee\u9898\u4e00\u6837, \u662f\u9009\u62e9\u7684\u7279\u5f81, \u4e5f\u79f0\u4e3a tasks  \u91c7\u7528\u4e86\u5750\u6807\u4e0b\u964d\u6cd5\u6c42\u89e3\u53c2\u6570",
            "title": "1.1.5 \u5f39\u6027\u7f51"
        },
        {
            "location": "/\u673a\u5668\u5b66\u4e60/GeneralizedLinearModels/#117",
            "text": "\u6700\u5c0f\u89d2\u56de\u5f52 (LARS) \u662f\u5bf9 \u9ad8\u7ef4\u6570\u636e \u7684\u56de\u5f52\u7b97\u6cd5  LARS\u548c\u9010\u6b65\u56de\u5f52\u5f88\u50cf. \u5728\u6bcf\u4e00\u6b65, \u5b83\u5bfb\u627e\u4e0e\u54cd\u5e94\u6700\u6709\u5173\u8054\u7684 \u9884\u6d4b. \u5f53\u6709\u5f88\u591a\u9884\u6d4b\u7531\u76f8\u540c\u7684\u5173\u8054\u65f6, \u5b83\u6ca1\u6709\u7ee7\u7eed\u5229\u7528\u76f8\u540c\u7684\u9884\u6d4b, \u800c\u662f\u5728\u8fd9\u4e9b\u9884\u6d4b\u4e2d\u627e\u51fa\u5e94\u8be5\u7b49\u89d2\u7684\u65b9\u5411  \u5b83\u5bf9\u566a\u58f0\u975e\u5e38\u654f\u611f  LassoLars \u662f\u4e00\u4e2a\u4f7f\u7528LARS\u7b97\u6cd5\u7684lasso\u6a21\u578b,  \u4e0d\u540c\u4e8e\u57fa\u4e8e\u5750\u6807\u4e0b\u964d\u6cd5\u7684\u5b9e\u73b0, \u5b83\u53ef\u4ee5\u5f97\u5230\u4e00\u4e2a\u7cbe\u786e\u89e3, \u4e5f\u5c31\u662f\u4e00\u4e2a \u5173\u4e8e\u81ea\u8eab\u53c2\u6570\u6807\u51c6\u5316\u540e\u7684\u4e00\u4e2a\u5206\u6bb5\u7ebf\u6027\u89e3",
            "title": "1.1.7 \u6700\u5c0f\u89d2\u56de\u5f52"
        },
        {
            "location": "/\u673a\u5668\u5b66\u4e60/GeneralizedLinearModels/#1110",
            "text": "\u8d1d\u53f6\u65af\u56de\u5f52\u53ef\u4ee5\u7528\u4e8e\u5728\u9884\u4f30\u9636\u6bb5\u7684\u53c2\u6570\u6b63\u5219\u5316: \u6b63\u5219\u5316\u53c2\u6570\u7684\u9009\u62e9\u4e0d\u662f\u901a\u8fc7\u4eba\u4e3a\u7684\u9009\u62e9, \u800c\u662f\u901a\u8fc7\u624b\u52a8\u8c03\u8282\u6570\u636e\u503c\u6765\u5b9e\u73b0  \u5b83\u80fd\u6839\u636e\u5df2\u6709\u7684\u6570\u636e\u8fdb\u884c\u6539\u53d8.   \u5b83\u80fd\u5728\u4f30\u8ba1\u8fc7\u7a0b\u4e2d\u5f15\u5165\u6b63\u5219\u9879.   \u5b83\u7684\u63a8\u65ad\u8fc7\u7a0b\u662f\u975e\u5e38\u8017\u65f6\u7684",
            "title": "1.1.10 \u8d1d\u53f6\u65af\u56de\u5f52"
        },
        {
            "location": "/\u673a\u5668\u5b66\u4e60/GeneralizedLinearModels/#11101",
            "text": "\u53c2\u6570 w,  \\alpha \\alpha  \u548c  \\lambda \\lambda  \u662f\u5728\u6a21\u578b\u62df\u5408\u7684\u65f6\u5019\u4e00\u8d77\u88ab\u4f30\u7b97\u51fa\u6765\u7684. \u5269\u4e0b\u7684\u8d85\u53c2\u6570\u5c31\u662f gamma \u5206\u5e03\u7684\u5148\u9a8c\u4e86.  \\alpha \\alpha  \u548c  \\lambda \\lambda  . \u5b83\u4eec\u901a\u5e38\u88ab\u9009\u62e9\u4e3a \u6ca1\u6709\u4fe1\u606f\u91cf . \u6a21\u578b\u53c2\u6570\u7684\u4f30\u8ba1\u4e00\u822c\u5229\u7528 \u6700\u5927\u4f3c\u7136\u5bf9\u6570\u4f30\u8ba1\u6cd5 .   \\alpha_1 = \\alpha_2 =  \\lambda_1 = \\lambda_2 = 10^{-6} \\alpha_1 = \\alpha_2 =  \\lambda_1 = \\lambda_2 = 10^{-6}  \u8d1d\u53f6\u65af\u5cad\u56de\u5f52\u5bf9\u75c5\u6001\u95ee\u9898(ill-posed)\u7684\u9c81\u68d2\u6027\u8981\u66f4\u597d",
            "title": "1.1.10.1 \u8d1d\u53f6\u65af\u5cad\u56de\u5f52"
        },
        {
            "location": "/\u673a\u5668\u5b66\u4e60/GeneralizedLinearModels/#1111-logistic",
            "text": "logistic \u56de\u5f52\u53c8\u88ab\u79f0\u4f5c logit regression(logit \u56de\u5f52), maximum-entropy classification(MaxEnt, \u6700\u5927\u71b5\u5206\u7c7b), \u6216 log-linear classifier(\u7ebf\u6027\u5bf9\u6570\u5206\u7c7b\u5668)  \u8be5\u6a21\u578b\u5229\u7528\u51fd\u6570 logistic function \u5c06\u5355\u6b21\u8bd5\u9a8c(single trial)\u7684\u8f93\u51fa\u8f6c\u5316\u5e76\u63cf\u8ff0\u4e3a\u6982\u7387  scikit-learn \u4e2d logistic \u56de\u5f52\u5728 LogisticRegression \u7c7b\u4e2d\u5b9e\u73b0\u4e86 \u4e8c\u5143(binary)\u3001\u4e00\u5bf9\u4f59(one-vs-rest)\u53ca\u591a\u5143 logistic \u56de\u5f52, \u5e76\u5e26\u6709\u53ef\u9009\u7684 L1 \u548c L2 \u6b63\u5219\u5316  liblinear \u5e94\u7528\u4e86\u5750\u6807\u4e0b\u964d\u7b97\u6cd5(Coordinate Descent, CD  CD\u7b97\u6cd5\u8bad\u7ec3\u7684\u6a21\u578b\u4e0d\u662f\u771f\u6b63\u610f\u4e49\u4e0a\u7684\u591a\u5206\u7c7b\u6a21\u578b, \u800c\u662f\u57fa\u4e8e one-vs-rest \u601d\u60f3\u5206\u89e3\u4e86\u8fd9\u4e2a\u4f18\u5316\u95ee\u9898, \u4e3a\u6bcf\u4e2a\u7c7b\u522b\u90fd\u8bad\u7ec3\u4e86\u4e00\u4e2a\u4e8c\u5143\u5206\u7c7b\u5668  lbfgs, sag \u548c newton-cg solvers (\u6c42\u89e3\u5668)\u53ea\u652f\u6301 L2 \u7f5a\u9879, \u5bf9\u67d0\u4e9b\u9ad8\u7ef4\u6570\u636e\u6536\u655b\u66f4\u5feb. \u8fd9\u4e9b\u6c42\u89e3\u5668\u7684\u53c2\u6570  multi_class \u8bbe\u4e3a multinomial \u5373\u53ef\u8bad\u7ec3\u4e00\u4e2a\u771f\u6b63\u7684\u591a\u5143 logistic \u56de\u5f52 , \u5176\u9884\u6d4b\u7684\u6982\u7387\u6bd4\u9ed8\u8ba4\u7684 one-vs-rest \u8bbe\u5b9a\u66f4\u4e3a\u51c6\u786e  sag \u6c42\u89e3\u5668\u57fa\u4e8e\u5e73\u5747\u968f\u673a\u68af\u5ea6\u4e0b\u964d\u7b97\u6cd5(Stochastic Average Gradient descent). \u5728\u5927\u6570\u636e\u96c6\u4e0a\u7684\u8868\u73b0\u66f4\u5feb, \u5927\u6570\u636e\u96c6\u6307\u6837\u672c\u91cf\u5927\u4e14\u7279\u5f81\u6570\u591a  saga solver \u662f sag \u7684\u4e00\u7c7b\u53d8\u4f53, \u5b83\u652f\u6301\u975e\u5e73\u6ed1(non-smooth)\u7684 L1 \u6b63\u5219\u9009\u9879 penalty=l1 . \u56e0\u6b64\u5bf9\u4e8e\u7a00\u758f\u591a\u5143 logistic \u56de\u5f52 , \u5f80\u5f80\u9009\u7528\u8be5\u6c42\u89e3\u5668      Case  Solver      L1\u6b63\u5219  liblinear or saga    \u591a\u5143\u635f\u5931  lbfgs, sag, saga or newton-cg    \u5927\u6570\u636e\u96c6  sag or saga       saga \u4e00\u822c\u90fd\u662f\u6700\u4f73\u7684\u9009\u62e9,\u4f46\u51fa\u4e8e\u4e00\u4e9b\u5386\u53f2\u9057\u7559\u539f\u56e0\u9ed8\u8ba4\u7684\u662f liblinear    SGDClassifier \u548c SGDRegressor \u5206\u522b\u7528\u4e8e\u62df\u5408\u5206\u7c7b\u95ee\u9898\u548c\u56de\u5f52\u95ee\u9898\u7684\u7ebf\u6027\u6a21\u578b, \u53ef\u4f7f\u7528\u4e0d\u540c\u7684(\u51f8)\u635f\u5931\u51fd\u6570, \u652f\u6301\u4e0d\u540c\u7684\u7f5a\u9879",
            "title": "1.1.11 logistic \u56de\u5f52"
        },
        {
            "location": "/\u673a\u5668\u5b66\u4e60/GeneralizedLinearModels/#1113-perceptron",
            "text": "Perceptron \u662f\u9002\u7528\u4e8e large scale learning(\u5927\u89c4\u6a21\u5b66\u4e60)\u7684\u4e00\u79cd\u7b80\u5355\u7b97\u6cd5  \u4e0d\u9700\u8981\u8bbe\u7f6e\u5b66\u4e60\u7387(learning rate).   \u4e0d\u9700\u8981\u6b63\u5219\u5316\u5904\u7406.   \u4ec5\u4f7f\u7528\u9519\u8bef\u6837\u672c\u66f4\u65b0\u6a21\u578b  \u5408\u9875\u635f\u5931(hinge loss)\u7684\u611f\u77e5\u673a\u6bd4SGD\u7565\u5feb, \u6240\u5f97\u6a21\u578b\u66f4\u7a00\u758f",
            "title": "1.1.13 Perceptron\u611f\u77e5\u673a"
        },
        {
            "location": "/\u673a\u5668\u5b66\u4e60/GeneralizedLinearModels/#1116",
            "text": "polynomial regression \u662f\u7ebf\u6027\u6a21\u578b\u4e2d\u7684\u540c\u4e00\u7c7b, \u6211\u4eec\u8ba4\u4e3a\u4ee5\u4e0a(\u5373\u6a21\u578b\u662f\u7ebf\u6027 ), \u53ef\u4ee5\u7528\u540c\u6837\u7684\u65b9\u6cd5\u89e3\u51b3  poly = PolynomialFeatures(degree=2) \u548c poly.fit_transform(X) \u7528\u4e8e\u5b9e\u73b0\u975e\u7ebf\u6027\u5230\u7ebf\u6027\u7684\u8f6c\u6362  \u5229\u7528\u591a\u9879\u5f0f\u7279\u5f81\u8bad\u7ec3\u7684\u7ebf\u6027\u6a21\u578b\u80fd\u591f\u51c6\u786e\u5730\u6062\u590d\u8f93\u5165\u591a\u9879\u5f0f\u7cfb\u6570",
            "title": "1.1.16 \u591a\u9879\u5f0f\u56de\u5f52\uff1a\u7528\u57fa\u51fd\u6570\u5c55\u5f00\u7ebf\u6027\u6a21\u578b"
        },
        {
            "location": "/\u673a\u5668\u5b66\u4e60/GeneralizedLinearModels/#12",
            "text": "Linear Discriminant Analysis(\u7ebf\u6027\u5224\u522b\u5206\u6790)(discriminant_analysis.LinearDiscriminantAnalysis) \u548c Quadratic Discriminant Analysis (\u4e8c\u6b21\u5224\u522b\u5206\u6790)(discriminant_analysis.QuadraticDiscriminantAnalysis) \u662f\u4e24\u4e2a\u7ecf\u5178\u7684\u5206\u7c7b\u5668. \u6b63\u5982\u4ed6\u4eec\u540d\u5b57\u6240\u63cf\u8ff0\u7684\u90a3\u6837, \u4ed6\u4eec\u5206\u522b\u4ee3\u8868\u4e86 \u7ebf\u6027\u51b3\u7b56\u5e73\u9762\u548c\u4e8c\u6b21\u51b3\u7b56\u5e73\u9762  \u5176\u5929\u751f\u7684\u591a\u5206\u7c7b\u7279\u6027, \u5728\u5b9e\u8df5\u4e2d\u5df2\u7ecf\u8bc1\u660e\u5f88\u6709\u6548, \u5e76\u4e14  \u4e0d\u9700\u8981\u518d\u6b21\u8c03\u53c2  \u7ebf\u6027\u5224\u522b\u5206\u6790\u53ea\u80fd\u5b66\u4e60\u7ebf\u6027\u8fb9\u754c,  \u800c\u4e8c\u6b21\u5224\u522b\u5206\u6790\u5219\u53ef\u4ee5\u5b66\u4e60\u4e8c\u6b21\u51fd\u6570\u7684\u8fb9\u754c, \u56e0\u6b64\u5b83\u76f8\u5bf9\u800c\u8a00\u66f4\u52a0\u7075\u6d3b  \u7ebf\u6027\u5224\u522b\u5206\u6790\u964d\u7ef4 \u662f\u603b\u4f53\u800c\u8a00\u5341\u5206\u5f3a\u5927\u7684\u964d\u7ef4\u65b9\u5f0f, \u540c\u6837\u4e5f  \u4ec5\u4ec5\u5728\u591a\u5206\u7c7b\u73af\u5883\u4e0b\u624d\u4f1a\u8d77\u4f5c\u7528  discriminant_analysis.LinearDiscriminantAnalysis.transform  LDA \u5206\u7c7b\u5668\u4e2d\u5b58\u5728\u4e00\u4e2a\u5229\u7528\u7ebf\u6027\u6295\u5f71\u5230 K-1 \u4e2a\u7ef4\u5ea6\u7a7a\u95f4\u7684\u964d\u7ef4\u5de5\u5177  \u6536\u7f29\u662f\u4e00\u4e2a\u5728\u8bad\u7ec3\u6837\u672c\u6570\u91cf\u76f8\u6bd4\u7279\u5f81\u800c\u8a00\u5f88\u5c0f\u7684\u60c5\u51b5\u4e0b\u53ef\u4ee5\u63d0\u5347\u9884\u6d4b(\u51c6\u786e\u6027)\u7684\u534f\u65b9\u5dee\u77e9\u9635  LDA \u6536\u7f29\u53ef\u4ee5\u901a\u8fc7\u8bbe\u7f6e discriminant_analysis.LinearDiscriminantAnalysis \u7c7b\u7684 shrinkage \u53c2\u6570\u4e3a \u2018auto\u2019 \u4ee5\u5f97\u5230\u5e94\u7528.",
            "title": "1.2 \u7ebf\u6027\u548c\u4e8c\u6b21\u5224\u522b\u5206\u6790"
        },
        {
            "location": "/\u673a\u5668\u5b66\u4e60/GeneralizedLinearModels/#13",
            "text": "Kernel ridge regression (KRR) (\u5185\u6838\u5cad\u56de\u5f52\u7531 \u4f7f\u7528\u5185\u6838\u65b9\u6cd5\u7684 (\u5cad\u56de\u5f52)(\u4f7f\u7528 l2 \u6b63\u5219\u5316\u7684\u6700\u5c0f\u4e8c\u4e58\u6cd5)\u6240\u7ec4\u6210. \u56e0\u6b64, \u5b83\u6240\u5b66\u4e60\u5230\u7684\u5728\u7a7a\u95f4\u4e2d\u4e0d\u540c\u7684\u7ebf\u6027\u51fd\u6570\u662f\u7531\u4e0d\u540c\u7684\u5185\u6838\u548c\u6570\u636e\u6240\u5bfc\u81f4\u7684. \u5bf9\u4e8e\u975e\u7ebf\u6027\u7684\u5185\u6838, \u5b83\u4e0e\u539f\u59cb\u7a7a\u95f4\u4e2d\u7684\u975e\u7ebf\u6027\u51fd\u6570\u76f8\u5bf9\u5e94  \u7531 KernelRidge \u5b66\u4e60\u7684\u6a21\u578b\u7684\u5f62\u5f0f\u4e0e\u652f\u6301\u5411\u91cf\u56de\u5f52( SVR ) \u662f\u4e00\u6837\u7684. \u4f46\u662f\u4ed6\u4eec\u4f7f\u7528\u4e0d\u540c\u7684\u635f\u5931\u51fd\u6570\uff1a\u5185\u6838\u5cad\u56de\u5f52(KRR)\u4f7f\u7528 squared error loss (\u5e73\u65b9\u8bef\u5dee\u635f\u5931\u51fd\u6570)\u800c support vector regression (\u652f\u6301\u5411\u91cf\u56de\u5f52)(SVR)\u4f7f\u7528  \\epsilon \\epsilon  -insensitive loss , \u4e24\u8005\u90fd\u4f7f\u7528 l2 regularization (l2 \u6b63\u5219\u5316). \u4e0e SVR \u76f8\u53cd, \u62df\u5408 KernelRidge \u53ef\u4ee5\u4ee5 closed-form (\u5c01\u95ed\u5f62\u5f0f)\u5b8c\u6210, \u5bf9\u4e8e\u4e2d\u578b\u6570\u636e\u96c6\u901a\u5e38\u66f4\u5feb. \u53e6\u4e00\u65b9\u9762, \u5b66\u4e60\u7684\u6a21\u578b\u662f\u975e\u7a00\u758f\u7684, \u56e0\u6b64\u6bd4 SVR \u6162,  \u5728\u9884\u6d4b\u65f6\u95f4, SVR \u5b66\u4e60\u4e86  \\epsilon>0 \\epsilon>0  \u7684\u7a00\u758f\u6a21\u578b.   \u5b83\u4eec\u7684 learned functions (\u5b66\u4e60\u51fd\u6570)\u975e\u5e38\u76f8\u4f3c;\u4f46\u662f, \u62df\u5408 KernelRidge \u5927\u7ea6\u6bd4\u62df\u5408 SVR \u5feb\u4e03\u500d(\u90fd\u4f7f\u7528 grid-search ( \u7f51\u683c\u641c\u7d22 ) ). \u7136\u800c, \u7531\u4e8e SVR \u53ea\u5b66\u4e60\u4e86\u4e00\u4e2a\u7a00\u758f\u6a21\u578b, \u6240\u4ee5 SVR \u9884\u6d4b 10 \u4e07\u4e2a\u76ee\u6807\u503c\u6bd4\u4f7f\u7528 KernelRidge \u5feb\u4e09\u500d\u4ee5\u4e0a. SVR \u53ea\u4f7f\u7528\u4e86\u767e\u5206\u4e4b\u4e09\u5341\u7684\u6570\u636e\u70b9\u505a\u4e3a\u652f\u6491\u5411\u91cf  \u5bf9\u4e8e\u4e2d\u578b\u8bad\u7ec3\u96c6(\u5c0f\u4e8e 1000 \u4e2a\u6837\u672c), \u62df\u5408 KernelRidge \u6bd4 SVR \u5feb; \u7136\u800c, \u5bf9\u4e8e\u66f4\u5927\u7684\u8bad\u7ec3\u96c6 SVR \u901a\u5e38\u66f4\u597d. \u5173\u4e8e\u9884\u6d4b\u65f6\u95f4, \u7531\u4e8e\u5b66\u4e60\u7684\u7a00\u758f\u89e3, SVR \u5bf9\u4e8e\u6240\u6709\u4e0d\u540c\u5927\u5c0f\u7684\u8bad\u7ec3\u96c6\u90fd\u6bd4 KernelRidge \u5feb  \u7a00\u758f\u89e3 \u662f\u8bf4\u53ea\u4f7f\u7528\u4e00\u90e8\u5206\u7279\u5f81\u4f5c\u4e3a\u5173\u952e\u8bad\u7ec3\u7279\u5f81",
            "title": "1.3 \u6838\u5cad\u56de\u5f52"
        },
        {
            "location": "/\u673a\u5668\u5b66\u4e60/GeneralizedLinearModels/#14-svm",
            "text": "\u652f\u6301\u5411\u91cf\u673a\u53ef\u4ee5\u7528\u4e8e  \u5206\u7c7b, \u56de\u5f52, \u5f02\u5e38\u68c0\u6d4b  \u4f18\u52bf:   \u5728\u9ad8\u7ef4\u7a7a\u95f4\u4e2d\u975e\u5e38\u9ad8\u6548  \u5373\u4f7f\u5728 \u6570\u636e\u7ef4\u5ea6\u6bd4\u6837\u672c\u6570\u91cf\u5927 \u7684\u60c5\u51b5\u4e0b\u4ecd\u7136\u6709\u6548  \u5728\u51b3\u7b56\u51fd\u6570(\u79f0\u4e3a\u652f\u6301\u5411\u91cf)\u4e2d\u4f7f\u7528\u8bad\u7ec3\u96c6\u7684\u5b50\u96c6  \u901a\u7528\u6027: \u4e0d\u540c\u7684\u6838\u51fd\u6570\u4e0e\u7279\u5b9a\u7684\u51b3\u7b56\u51fd\u6570\u4e00\u4e00\u5bf9\u5e94   \u52a3\u52bf:   \u5982\u679c\u7279\u5f81\u6570\u91cf\u6bd4\u6837\u672c\u6570\u91cf\u5927\u5f97\u591a, \u5728\u9009\u62e9\u6838\u51fd\u6570\u65f6\u8981\u907f\u514d\u8fc7\u62df\u5408   \u5f53\u7c7b\u522b\u4e0d\u5747\u8861\u65f6, \u4f7f\u7528\u5e26\u6709 \u7c7b\u522b\u6743\u91cd\u7684   wclf = svm.SVC(kernel='linear', class_weight={1: 10})  \u652f\u6301\u5411\u91cf\u5206\u7c7b\u7684\u65b9\u6cd5\u53ef\u4ee5\u88ab\u6269\u5c55\u7528\u4f5c\u89e3\u51b3\u56de\u5f52\u95ee\u9898. \u8fd9\u4e2a\u65b9\u6cd5\u88ab\u79f0\u4f5c\u652f\u6301\u5411\u91cf\u56de\u5f52. \u652f\u6301\u5411\u91cf\u5206\u7c7b\u751f\u6210\u7684\u6a21\u578b\u53ea\u4f9d\u8d56\u4e8e\u8bad\u7ec3\u96c6\u7684\u5b50\u96c6,\u56e0\u4e3a\u6784\u5efa\u6a21\u578b\u7684 cost function \u4e0d\u5728\u4e4e\u8fb9\n\u7f18\u4e4b\u5916\u7684\u8bad\u7ec3\u70b9. \u7c7b\u4f3c\u7684, \u652f\u6301\u5411\u91cf\u56de\u5f52\u751f\u6210\u7684\u6a21\u578b\u53ea\u4f9d\u8d56\u4e8e\u8bad\u7ec3\u96c6\u7684\u5b50\u96c6, \u56e0\u4e3a\u6784\u5efa\u6a21\u578b\u7684 cost function \u5ffd\u7565\u4efb\u4f55\u63a5\u8fd1\u4e8e\u6a21\u578b\u9884\u6d4b\u7684\u8bad\u7ec3\u6570\u636e. SVM\u7684\u6838\u5fc3\u662f\u4e00\u4e2a\u4e8c\u6b21\u89c4\u5212\n\u95ee\u9898(Quadratic Programming, QP), \u662f\u5c06\u652f\u6301\u5411\u91cf\u548c\u8bad\u7ec3\u6570\u636e\u7684\u5176\u4f59\u90e8\u5206\u5206\u79bb\u5f00\u6765, \u652f\u6301\u5411\u91cf\u673a\u662f\u4e2a\u5f3a\u5927\u7684\u5de5\u5177, \u4e0d\u8fc7\u5b83\u7684\u8ba1\u7b97\u548c\u5b58\u50a8\u7a7a\u95f4\u8981\u6c42\u4e5f\u4f1a\u968f\u7740\u8981\u8bad\u7ec3\u5411\u91cf\u7684\u6570\u76ee\u589e\n\u52a0\u800c\u5feb\u901f\u589e\u52a0   \u60e9\u7f5a\u7cfb\u6570C\u7684\u8bbe\u7f6e:\u5728\u5408\u7406\u7684\u60c5\u51b5\u4e0b, C \u7684\u9ed8\u8ba4\u9009\u62e9\u4e3a 1. \u5982\u679c\u60a8\u6709\u5f88\u591a\u6df7\u6742\u7684\u89c2\u5bdf\u6570\u636e, \u60a8\u5e94\u8be5\u8981\u53bb\u8c03\u5c0f\u5b83. C \u8d8a\u5c0f, \u5c31\u80fd\u66f4\u597d\u5730\u53bb\u6b63\u89c4\u5316\u4f30\u8ba1  \u5e38\u7528\u6838\u51fd\u6570  \u7ebf\u6027  k(x_i, x_j) = x_i^T x_j k(x_i, x_j) = x_i^T x_j <span><span class=\"MathJax_Preview\">k(x_i, x_j) = x_i^T x_j</span><script type=\"math/tex\">k(x_i, x_j) = x_i^T x_j  \u591a\u9879\u5f0f  k(x_i, x_j) = (x_i^T x_j)^d k(x_i, x_j) = (x_i^T x_j)^d <span><span class=\"MathJax_Preview\">k(x_i, x_j) = (x_i^T x_j)^d</span><script type=\"math/tex\">k(x_i, x_j) = (x_i^T x_j)^d  \u9ad8\u65af\u6838rbf  k(x_i, x_j) = exp(-\\frac{||x_i - x_j||^2}{2 \\sigma^2}) k(x_i, x_j) = exp(-\\frac{||x_i - x_j||^2}{2 \\sigma^2}) <span><span class=\"MathJax_Preview\">k(x_i, x_j) = exp(-\\frac{||x_i - x_j||^2}{2 \\sigma^2})</span><script type=\"math/tex\">k(x_i, x_j) = exp(-\\frac{||x_i - x_j||^2}{2 \\sigma^2})  \u62c9\u666e\u62c9\u65af  k(x_i, x_j) = exp(-\\frac{||x_i - x_j||}{\\sigma}) k(x_i, x_j) = exp(-\\frac{||x_i - x_j||}{\\sigma}) <span><span class=\"MathJax_Preview\">k(x_i, x_j) = exp(-\\frac{||x_i - x_j||}{\\sigma})</span><script type=\"math/tex\">k(x_i, x_j) = exp(-\\frac{||x_i - x_j||}{\\sigma})  sigmoid  k(x_i, x_j) = \\tanh(\\beta x_i^T x_j + \\theta) k(x_i, x_j) = \\tanh(\\beta x_i^T x_j + \\theta) <span><span class=\"MathJax_Preview\">k(x_i, x_j) = \\tanh(\\beta x_i^T x_j + \\theta)</span><script type=\"math/tex\">k(x_i, x_j) = \\tanh(\\beta x_i^T x_j + \\theta)   \u6838\u51fd\u6570\u901a\u8fc7\u521b\u5efa\u5b9e\u4f8b\u65f6\u8fdb\u884c\u6307\u5b9a svm.SVC(kernel='linear')    \u81ea\u5b9a\u4e49\u6838\u51fd\u6570    def my_kernel(x, y):\n  return np.dot(x, y.T)   \u5f53\u7528 \u5f84\u5411\u57fa(RBF)\u5185\u6838\u53bb\u8bad\u7ec3 SVM, \u6709\u4e24\u4e2a\u53c2\u6570\u5fc5\u987b\u8981\u53bb\u8003\u8651: C,  \\gamma \\gamma . \u8f83\u5c0f\u7684 C \u4f1a\u4f7f\u51b3\u7b56\u8868\u9762\u66f4\u5e73\u6ed1, \u540c\u65f6\u8f83\u9ad8\u7684 C \u65e8\u5728\u6b63\u786e\u5730\u5206\u7c7b\u6240\u6709\u8bad\u7ec3\u6837\u672c. Gamma \u5b9a\u4e49\u4e86\u5355\u4e00 \u8bad\u7ec3\u6837\u672c\u80fd\u8d77\u5230\u591a\u5927\u7684\u5f71\u54cd. \u8f83\u5927\u7684 gamma \u4f1a\u66f4\u8ba9\u5176\u4ed6\u6837\u672c\u53d7\u5230\u5f71\u54cd",
            "title": "1.4 SVM"
        },
        {
            "location": "/\u673a\u5668\u5b66\u4e60/GeneralizedLinearModels/#15",
            "text": "SGD \u5bf9\u7279\u5f81\u7f29\u653e \u654f\u611f  \u5fc5\u987b\u5c06 \u76f8\u540c \u7684\u7f29\u653e\u5e94\u7528\u4e8e\u5bf9\u5e94\u7684\u6d4b\u8bd5\u5411\u91cf\u4e2d\uff0c\u4ee5\u83b7\u5f97\u6709\u610f\u4e49\u7684\u7ed3\u679c  \u5728\u62df\u5408\u6a21\u578b\u524d\u8981\u786e\u4fdd\u8bad\u7ec3\u6570\u636e\u7ecf\u8fc7\u4e86\u6253\u4e71  shuffle=True   from sklearn.linear_model import SGDClassifier\n\nX = [[0, 0], [1, 1]]\ny = [0, 1]\n\nclf = SGDClassifier(loss='hinge', penalty='l2', max_iter=500, tol=1e-3)\nclf.fit(X, y)\n# prediction\nres = clf.predict([[2, 2]])\nprint(res)   SGDClassifier \u901a\u8fc7\u5728\u5c06\u591a\u4e2a binary classifiers\u7ec4\u5408\u5728 one versus all(OVA) \u65b9\u6848\u4e2d\u6765\u652f\u6301\u591a\u7c7b\u5206\u7c7b  SGDRegressor \u7c7b\u5b9e\u73b0\u4e86\u4e00\u4e2a\u7b80\u5355\u7684\u968f\u5373\u68af\u5ea6\u4e0b\u964d\u5b66\u4e60\u7a0b\u5e8f, \u5b83\u652f\u6301\u4e0d\u540c\u7684\u635f\u5931\u51fd\u6570\u548c\u60e9\u7f5a\u6765\u62df\u5408\u7ebf\u6027\u56de\u5f52\u6a21\u578b",
            "title": "1.5 \u968f\u673a\u68af\u5ea6\u4e0b\u964d"
        },
        {
            "location": "/\u673a\u5668\u5b66\u4e60/GeneralizedLinearModels/#16",
            "text": "\u65e0\u76d1\u7763\u7684\u6700\u8fd1\u90bb\u662f\u8bb8\u591a\u5176\u5b83\u5b66\u4e60\u65b9\u6cd5\u7684\u57fa\u7840, \u5c24\u5176\u662f manifold learning \u548c spectral clustering  \u53d7\u76d1\u7763\u7684 neighbors-based\u5b66\u4e60\u5206\u4e3a\u4e24\u79cd classification \u9488\u5bf9\u7684\u662f\u5177\u6709\u79bb\u6563\u6807\u7b7e\u7684\u6570\u636e, regression \u9488\u5bf9\u7684\u662f\u5177\u6709\u8fde\u7eed\u6807\u7b7e\u7684\u6570\u636e  \u975e\u53c2\u6570\u65b9\u6cd5  \u5e94\u7528\u4e8e\u51b3\u7b56\u8fb9\u754c\u975e\u5e38\u4e0d\u89c4\u5219\u7684\u60c5\u666f\u4e0b",
            "title": "1.6 \u6700\u8fd1\u90bb"
        },
        {
            "location": "/\u673a\u5668\u5b66\u4e60/GeneralizedLinearModels/#_2",
            "text": "\u5206\u7c7b\u662f\u7531\u6bcf\u4e2a\u70b9\u7684\u6700\u8fd1\u90bb\u7684\u7b80\u5355\u591a\u6570\u6295\u7968\u4e2d\u8ba1\u7b97\u5f97\u5230\u7684  \u4e00\u4e2a\u67e5\u8be2\u70b9\u7684\u6570\u636e\u7c7b\u578b\u662f\u7531\u5b83\u6700\u8fd1\u90bb\u70b9\u4e2d\u6700\u5177\u4ee3\u8868\u6027\u7684\u6570\u636e\u7c7b\u578b\u6765\u51b3\u5b9a\u7684  k \u503c\u7684\u6700\u4f73\u9009\u62e9\u662f\u9ad8\u5ea6\u6570\u636e\u4f9d\u8d56\u7684  \u901a\u5e38\u8f83\u5927\u7684 k \u662f\u4f1a\u6291\u5236\u566a\u58f0\u7684\u5f71\u54cd, \u4f46\u662f\u4f7f\u5f97\u5206\u7c7b\u754c\u9650\u4e0d\u660e\u663e  \u5982\u679c\u6570\u636e\u662f\u4e0d\u5747\u5300\u91c7\u6837\u7684, \u90a3\u4e48 RadiusNeighborsClassifier \u4e2d\u7684\u57fa\u4e8e\u534a\u5f84\u7684\u8fd1\u90bb\u5206\u7c7b\u53ef\u80fd\u662f\u66f4\u597d\u7684\u9009\u62e9  \u6307\u5b9a\u4e00\u4e2a\u56fa\u5b9a\u534a\u5f84 r, \u4f7f\u5f97\u7a00\u758f\u90bb\u5c45\u4e2d\u7684\u70b9\u4f7f\u7528\u8f83\u5c11\u7684\u6700\u8fd1\u90bb\u6765\u5206\u7c7b",
            "title": "\u6700\u8fd1\u90bb\u5206\u7c7b"
        },
        {
            "location": "/\u673a\u5668\u5b66\u4e60/GeneralizedLinearModels/#_3",
            "text": "\u6700\u8fd1\u90bb\u56de\u5f52\u662f\u7528\u5728\u6570\u636e\u6807\u7b7e\u4e3a\u8fde\u7eed\u53d8\u91cf, \u800c\u4e0d\u662f\u79bb\u6563\u53d8\u91cf\u7684\u60c5\u51b5\u4e0b  \u5206\u914d\u7ed9\u67e5\u8be2\u70b9\u7684\u6807\u7b7e\u662f\u7531\u5b83\u7684  \u6700\u8fd1\u90bb\u6807\u7b7e\u7684\u5747\u503c  \u8ba1\u7b97\u800c\u6765\u7684  \u5728\u67d0\u4e9b\u73af\u5883\u4e0b, \u589e\u52a0\u6743\u91cd\u53ef\u80fd\u662f\u6709\u5229\u7684, \u4f7f\u5f97\u9644\u8fd1\u70b9\u5bf9\u4e8e\u56de\u5f52\u6240\u4f5c\u51fa\u7684\u8d21\u732e\u591a\u4e8e\u8fdc\u5904\u70b9. \u8fd9\u53ef\u4ee5\u901a\u8fc7 weights \u5173\u952e\u5b57\u6765\u5b9e\u73b0  \u9ad8\u65af\u8fc7\u7a0b\u662f\u4e00\u79cd\u5e38\u7528\u7684\u76d1\u7763\u5b66\u4e60\u65b9\u6cd5\uff0c\u65e8\u5728\u89e3\u51b3  \u56de\u5f52\u95ee\u9898  \u548c  \u6982\u7387\u5206\u7c7b\u95ee\u9898",
            "title": "\u6700\u8fd1\u90bb\u56de\u5f52"
        },
        {
            "location": "/\u673a\u5668\u5b66\u4e60/GeneralizedLinearModels/#18",
            "text": "\u504f\u6700\u5c0f\u4e8c\u4e58\u6cd5(PLS)\u548c\u5178\u578b\u76f8\u5173\u5206\u6790(CCA)  \u5177\u6709\u53d1\u73b0\u4e24\u4e2a\u591a\u5143\u6570\u636e\u96c6\u4e4b\u95f4\u7684\u7ebf\u6027\u5173\u7cfb  \u7684\u7528\u9014: fit method(\u62df\u5408\u65b9\u6cd5)\u7684\u53c2\u6570 X \u548c Y \u90fd\u662f 2 \u7ef4\u6570\u7ec4",
            "title": "1.8 \u4ea4\u53c9\u5206\u89e3"
        },
        {
            "location": "/\u673a\u5668\u5b66\u4e60/GeneralizedLinearModels/#19",
            "text": "\u6734\u7d20\u8d1d\u53f6\u65af\u65b9\u6cd5\u662f\u57fa\u4e8e\u8d1d\u53f6\u65af\u5b9a\u7406\u7684\u4e00\u7ec4\u6709\u76d1\u7763\u5b66\u4e60\u7b97\u6cd5  \u7b80\u5355\u5730\u5047\u8bbe  \u6bcf\u5bf9\u7279\u5f81\u4e4b\u95f4\u76f8\u4e92\u72ec\u7acb , \u6734\u7d20\u7684\u7531\u6765  \u9ad8\u65af\u6734\u7d20\u8d1d\u53f6\u65af \u7684\u53c2\u6570\u4f7f\u7528 \u6700\u5927\u4f3c\u7136\u4f30\u8ba1  \u591a\u9879\u5206\u5e03\u6734\u7d20\u8d1d\u53f6\u65af  \u4f2f\u52aa\u5229\u6734\u7d20\u8d1d\u53f6\u65af  \u5806\u5916\u6734\u7d20\u8d1d\u53f6\u65af\u6a21\u578b\u62df\u5408",
            "title": "1.9 \u6734\u7d20\u8d1d\u53f6\u65af"
        },
        {
            "location": "/\u673a\u5668\u5b66\u4e60/GeneralizedLinearModels/#110",
            "text": "\u65e0\u53c2\u76d1\u7763\u5b66\u4e60\u65b9\u6cd5  \u56de\u5f52\u4e0e\u5206\u7c7b  \u76ee\u7684\u662f\u521b\u5efa\u4e00\u79cd\u6a21\u578b\u4ece\u6570\u636e\u7279\u5f81\u4e2d\u5b66\u4e60\u7b80\u5355\u7684\u51b3\u7b56\u89c4\u5219\u6765\u9884\u6d4b\u4e00\u4e2a\u76ee\u6807\u53d8\u91cf\u7684\u503c  \u51b3\u7b56\u6811\u6a21\u578b\u5bb9\u6613\u4ea7\u751f\u4e00\u4e2a\u8fc7\u4e8e\u590d\u6742\u7684\u6a21\u578b, \u8fd9\u6837\u7684\u6a21\u578b\u5bf9\u6570\u636e\u7684\u6cdb\u5316\u6027\u80fd\u4f1a\u5f88\u5dee  \u51b3\u7b56\u6811\u53ef\u80fd\u662f\u4e0d\u7a33\u5b9a\u7684, \u56e0\u4e3a\u6570\u636e\u4e2d\u7684\u5fae\u5c0f\u53d8\u5316\u53ef\u80fd\u4f1a\u5bfc\u81f4\u5b8c\u5168\u4e0d\u540c\u7684\u6811\u751f\u6210",
            "title": "1.10 \u51b3\u7b56\u6811"
        },
        {
            "location": "/\u673a\u5668\u5b66\u4e60/GeneralizedLinearModels/#111_1",
            "text": "",
            "title": "1.11 \u96c6\u6210\u65b9\u6cd5"
        },
        {
            "location": "/\u673a\u5668\u5b66\u4e60/unsupervised/",
            "text": "\u65e0\u76d1\u7763\u5b66\u4e60\n\n\n\u9ad8\u65af\u6df7\u5408\u6a21\u578b\n\n\n\u6d41\u5f62\u5b66\u4e60\n\n\n\u805a\u7c7b\n\n\n\u77e9\u9635\u5206\u89e3",
            "title": "\u65e0\u76d1\u7763\u5b66\u4e60"
        },
        {
            "location": "/\u673a\u5668\u5b66\u4e60/unsupervised/#_1",
            "text": "",
            "title": "\u65e0\u76d1\u7763\u5b66\u4e60"
        },
        {
            "location": "/\u673a\u5668\u5b66\u4e60/unsupervised/#_2",
            "text": "",
            "title": "\u9ad8\u65af\u6df7\u5408\u6a21\u578b"
        },
        {
            "location": "/\u673a\u5668\u5b66\u4e60/unsupervised/#_3",
            "text": "",
            "title": "\u6d41\u5f62\u5b66\u4e60"
        },
        {
            "location": "/\u673a\u5668\u5b66\u4e60/unsupervised/#_4",
            "text": "",
            "title": "\u805a\u7c7b"
        },
        {
            "location": "/\u673a\u5668\u5b66\u4e60/unsupervised/#_5",
            "text": "",
            "title": "\u77e9\u9635\u5206\u89e3"
        },
        {
            "location": "/\u673a\u5668\u5b66\u4e60/model/",
            "text": "\u6a21\u578b\u8bc4\u4f30",
            "title": "\u6a21\u578b\u9009\u62e9"
        },
        {
            "location": "/\u673a\u5668\u5b66\u4e60/model/#_1",
            "text": "",
            "title": "\u6a21\u578b\u8bc4\u4f30"
        },
        {
            "location": "/\u6df1\u5ea6\u5b66\u4e60/CNN/",
            "text": "",
            "title": "CNN"
        },
        {
            "location": "/\u6df1\u5ea6\u5b66\u4e60/RNN/",
            "text": "",
            "title": "RNN"
        },
        {
            "location": "/Blog/Bayesian/",
            "text": "\u8d1d\u53f6\u65af\u601d\u60f3\n\n\n\n\nf(x)=\\sin(x)\n\n\nf(x)=\\sin(x)",
            "title": "\u8d1d\u53f6\u65af\u601d\u60f3"
        },
        {
            "location": "/Blog/Bayesian/#_1",
            "text": "f(x)=\\sin(x)  f(x)=\\sin(x)",
            "title": "\u8d1d\u53f6\u65af\u601d\u60f3"
        },
        {
            "location": "/about/aboutme/",
            "text": "",
            "title": "AboutMe"
        },
        {
            "location": "/about/license/",
            "text": "MIT License\n\n\nCopyright (c) 2017 AutuanLiu\n\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.",
            "title": "License"
        }
    ]
}